{"version":3,"sources":["pages/BillingInformation/BillingInformation.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js","ui/MyInvoice/MyInvoice.component.module.css","ui/MyInvoice/MyInvoice.component.js","ui/MyInvoice/index.js"],"names":["BillingInformation","state","transaction","activeTransactionHandler","setState","undefined","this","props","match","params","user_id","getAllForUser","field","value","console","dir","nextProps","profileContainer","transactions","invoiceContainer","status","style","width","transaction_id","id","map","key","moment","created_at","date","format","type","reference_number","amount","toLocaleString","onClick","className","Fragment","title","marginBottom","links","url","name","Component","connect","AuthReducer","role_user","ProfileReducer","profile","TransactionReducer","get_transactions_status","dispatch","payload","LayoutContentStyle","styled","div","palette","module","exports","Breadcrumb","link","to","styles","item","itemTwo","join","defaultProps","withRouter","active","ChoseRoleReducer","role","MyInvoice","isVerifying","makePayment","a","async","navigator","onLine","window","PaystackPop","setup","email","owner","ref","subaccount","callback","response","startConfirmOnlinePayment","reference","onClose","openIframe","alert","showNotification","online_payment_status","swal","text","icon","closeOnClickOutside","resetPaymentVerification","form","get","container","header","get_single_transaction_status","decision","verifier","confirmHeader","confirmBody","payOption","model","notification","CustomButton","Number","submittingForm","actions","action","itemTitle","itemDescription","surname","first_name","other_name","confirmed_date","expires_at","ref_number_title","ref_number","body","itemsImage","items","enrollee_id","provider_name","provider_code","image","src","picture","split","policy_name","policy_duration","React","auth_user_id","update_transaction_status","updateTransaction"],"mappings":"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","file":"static/js/45.e3ba4051.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport {Card} from 'antd';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../ui/Breadcrumb\";\nimport Loader from '../../ui/Loader/Loader.Component';\nimport { getAllForUser } from '../../shared/actions/Transaction.action';\nimport MyInvoice from '../../ui/MyInvoice';\n\nclass BillingInformation extends Component {\n\n    state = {\n        transaction: null\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.user_id != undefined) {\n            this.props.getAllForUser({\n                field: 'id',\n                value: this.props.match.params.user_id\n            });\n        } else {\n            this.props.getAllForUser({\n                field: 'id',\n                value: this.props.user_id\n            });\n        }\n\n        console.dir(this.props.user_id);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // this.showNotificationFrom(nextProps);\n    }\n\n    activeTransactionHandler = transaction => {\n        this.setState({\n            transaction: transaction\n        });\n    }\n\n    render() {\n        let profileContainer, transactions, invoiceContainer;\n        if (this.props.status === 200) {\n\n            if (this.state.transaction !== null) {\n                invoiceContainer = (\n                    <Card style={{width: '100%'}}>\n                        <MyInvoice transaction_id={this.state.transaction.id} />\n                    </Card>\n                );\n            }\n\n            transactions = this.props.transactions.map(transaction => (\n                <tr key={transaction.id}>\n                    <td>{moment(transaction.created_at.date).format('Do MMMM YYYY')}</td>\n                    <td>{transaction.type}</td>\n                    <td>{transaction.status}</td>\n                    <td>{transaction.reference_number}</td>\n                    <td>{transaction.amount.toLocaleString()}</td>\n                    <td onClick={() => this.activeTransactionHandler(transaction)}><i className=\"fa fa-eye\"></i></td>\n                </tr>\n            ));\n\n            profileContainer = (\n                <React.Fragment>\n                    <div className=\"col-md-12\">\n                        <Card title=\"Transactions\" style={{width: '100%',marginBottom: '30px'}}>\n                            <table className=\"table table-striped\">\n                                <thead>\n                                    <tr>\n                                        <th>Date</th>\n                                        <th>Type</th>\n                                        <th>Status</th>\n                                        <th>Reference number</th>\n                                        <th>Amount</th>\n                                        <th>Access</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {transactions}\n                                </tbody>\n                            </table>\n                        </Card><br/>  \n                        {invoiceContainer}       \n                    </div>\n                </React.Fragment>\n            )\n        }\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <Breadcrumb links={[\n                                        {\n                                            url: '/dashboard/transaction',\n                                            name: 'Transaction'\n                                        },\n                                    ]} />\n                                </div>\n                            </div><hr/>\n                            <div className=\"row\">\n                                {profileContainer}\n                            </div>\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    user_id: state.AuthReducer.id,\n    role_user: state.ProfileReducer.profile,\n    transactions: state.TransactionReducer.transactions,\n    status: state.TransactionReducer.get_transactions_status,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getAllForUser: payload => dispatch(getAllForUser(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BillingInformation);","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MyInvoice.component_container__fvfzC\",\"header\":\"MyInvoice.component_header__27X8-\",\"title\":\"MyInvoice.component_title__G12Jb\",\"body\":\"MyInvoice.component_body__17FBk\",\"items\":\"MyInvoice.component_items__fEQME\",\"image\":\"MyInvoice.component_image__3wtWG\",\"item\":\"MyInvoice.component_item__2KC07\",\"itemTitle\":\"MyInvoice.component_itemTitle__3kp0B\",\"itemDescription\":\"MyInvoice.component_itemDescription__1p3Sj\",\"table\":\"MyInvoice.component_table__nnv2c\",\"actions\":\"MyInvoice.component_actions__38Kw9\",\"action\":\"MyInvoice.component_action__3MOio\",\"reject\":\"MyInvoice.component_reject__1HGjj\",\"itemsImage\":\"MyInvoice.component_itemsImage__3cYhE\",\"notification\":\"MyInvoice.component_notification___rCQU\"};","import React from 'react';\nimport moment from 'moment';\nimport swal from 'sweetalert';\nimport { connect } from 'react-redux';\nimport CustomButton from '../CustomButton';\nimport styles from './MyInvoice.component.module.css';\n\nimport { get, updateTransaction, startConfirmOnlinePayment, resetPaymentVerification } from '../../shared/actions/Transaction.action';\n\nclass MyInvoice extends React.Component {\n\n    state = {\n        isVerifying: false,\n    }\n\n    makePayment = async () => {\n        if(navigator.onLine){\n            const handler = await window.PaystackPop.setup({\n                //pk_test_c6107f2bff6d8a2d211f6cce9b9067f612f29a14\n                //pk_live_2a761fbb1a6eae9e6a4021e334182d8d7413b904\n    \n                key: 'pk_live_2a761fbb1a6eae9e6a4021e334182d8d7413b904',\n                email: this.props.transaction.owner.email,\n                amount: this.props.transaction.amount * 100,\n                ref: this.props.transaction.reference_number,\n                subaccount: 'ACCT_d1y7v4egjmlf96b',\n                callback: response => {\n                    this.setState({\n                        isVerifying: true,\n                    });\n                    this.props.startConfirmOnlinePayment({\n                        reference_number: response.reference\n                    });\n                },\n                onClose: function () {\n                    console.dir('window closed');\n                }\n            });\n            handler.openIframe();\n        } else {\n            alert('offline, please check your internet');\n        }\n    \n    }\n\n    showNotification = async props => {\n        if (props.online_payment_status === 200) {\n            let alert = await swal({\n                text: `Payment was made successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n            if (alert) {\n                this.props.resetPaymentVerification();\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.showNotification(nextProps);\n    }\n\n    componentDidMount() {\n        let form = {};\n\n        form['field'] = 'id';\n        form['value'] = this.props.transaction_id;\n\n        this.props.get(form);\n    }\n\n\n    render () {\n\n        let container;\n        let header = 'INVOICE';\n\n        if (this.props.get_single_transaction_status === 200) {\n\n            let transaction = this.props.transaction;\n            let model = this.props.transaction.model;\n\n            let decision, verifier, confirmHeader, confirmBody, payOption;\n\n            let notification = (\n                <div className={styles.notification}>\n                    We noticed that you have not supplied your email address. Please note that you will not be able to do online payment as email address is required for this\n                </div>\n            );\n\n\n            if (transaction.owner.email !== null) {\n                payOption = (\n                    <CustomButton onClick={this.makePayment} >Pay NGN {Number(transaction.amount).toLocaleString()}</CustomButton>\n                )\n                notification = null;\n            }\n\n            if (this.state.isVerifying) {\n                payOption = <CustomButton onClick={this.makePayment} submittingForm={true}>isloading</CustomButton>\n            }\n\n            if (transaction.status === 0) {\n                decision = (\n                    <div className={styles.actions}>\n                        <div className={styles.action}>\n                            { payOption }\n                        </div>\n                    </div>\n                )\n            }\n            if (transaction.status === 1) {\n                decision = (\n                    <div className={styles.actions}>\n                        <div className={styles.action}>\n                            <CustomButton>VERIFIED & ACTIVE</CustomButton>\n                        </div>\n                    </div>\n                )\n\n                verifier = (\n                    <div className={styles.item}>\n                        <div className={styles.itemTitle}>Verifier</div>\n                        <div className={styles.itemDescription}>\n                            <div>{transaction.verifier.surname} {transaction.verifier.first_name} {transaction.verifier.other_name}</div>\n                        </div>\n                    </div>\n                )\n\n                confirmHeader = (\n                    <React.Fragment>\n                        <th>Confirmed Date</th>\n                        <th>Expires</th>\n                    </React.Fragment>\n                )\n\n                confirmBody = (\n                    <React.Fragment>\n                        <td>{moment(transaction.confirmed_date).format('Do MMMM YYYY')}</td>\n                        <td>{moment(model.expires_at).format('Do MMMM YYYY')}</td>\n                        {/* <td>{moment(model.expires_at.date).format('Do MMMM YYYY')}</td> */}\n                    </React.Fragment>\n                )\n                header = 'RECEIPT';\n            }\n\n\n            container = (\n                <div className={styles.container}>\n\n                    <div  className={'card-header'}>\n                        <div className={styles.ref_number_title}>\n                            <div className={styles.ref_number}>1022020200202</div>\n                            <div className={'h3'} >{header}</div>\n                        </div>\n                        <div className={styles.date}>\n                            Osun Health Insurance Scheme\n                        </div>\n                    </div>\n\n\n                    <div className={styles.body}>\n\n\n                        <div className={styles.itemsImage}>\n                            <div className={styles.items}>\n                                <div className={styles.item}>\n                                    <div className={styles.itemTitle}>Enrollee</div>\n                                    <div className={styles.itemDescription}>\n                                        <div>{transaction.model.surname} {transaction.model.first_name} {transaction.model.other_name}</div>\n                                        <div>{transaction.model.enrollee_id}</div>\n                                    </div>\n                                </div>\n                                <div className={styles.item}>\n                                    <div className={styles.itemTitle}>Provider</div>\n                                    <div className={styles.itemDescription}>\n                                        <div>{transaction.model.provider_name}</div>\n                                        <div>{transaction.model.provider_code}</div>\n                                    </div>\n                                </div>\n                                <div className={styles.item}>\n                                    <div className={styles.itemTitle}>Amount</div>\n                                    <div className={styles.itemDescription}>\n                                        <div>NGN {Number(transaction.amount).toLocaleString()}</div>\n                                    </div>\n                                </div>\n\n                                {verifier}\n                            </div>\n\n                            <div className={styles.image}>\n                                <img src={transaction.model.picture} />\n                            </div>\n                        </div>\n\n                        <div className={\"table-responsive-sm\"}>\n                            <table className={\"table table-striped\"}>\n                                <thead>\n                                    <tr>\n                                        <th>Type</th>\n                                        <th>Issued Date</th>\n                                        <th>Policy Name</th>\n                                        <th>Duration</th>\n                                        <th>Reference Number</th>\n                                        {confirmHeader}\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>{transaction.type.split(\"_\").join(\" \")}</td>\n                                        <td>{moment(transaction.created_at.date).format('Do MMMM YYYY')}</td>\n                                        <td>{transaction.model.policy_name}</td>\n                                        <td>{transaction.model.policy_duration} Months</td>\n                                        <td>{transaction.reference_number}</td>\n                                        {confirmBody}\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <div>\n                                { notification }\n                            </div>\n                        </div>\n                    </div>\n\n\n\n                    {decision}\n                </div>\n            )\n        }\n\n\n        return (\n            <React.Fragment>\n                { container }\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        role: state.ChoseRoleReducer.role,\n        auth_user_id: state.AuthReducer.id,\n\n        transaction: state.TransactionReducer.transaction,\n        get_single_transaction_status: state.TransactionReducer.get_single_transaction_status,\n\n        online_payment_status: state.TransactionReducer.online_payment_status,\n        update_transaction_status: state.TransactionReducer.update_transaction_status,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        get: payload => dispatch(get(payload)),\n        updateTransaction: payload => dispatch(updateTransaction(payload)),\n        resetPaymentVerification: () => dispatch(resetPaymentVerification()),\n        startConfirmOnlinePayment: payload => dispatch(startConfirmOnlinePayment(payload))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyInvoice);","export { default } from './MyInvoice.component';\n"],"sourceRoot":""}