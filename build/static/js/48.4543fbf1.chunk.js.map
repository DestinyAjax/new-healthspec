{"version":3,"sources":["pages/Plan/Edit/PlanEdit.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js","ui/forms/PlanForm/PlanForm.component.module.css","ui/forms/PlanForm/PlanForm.component.js","ui/forms/PlanForm/index.js"],"names":["PlanEdit","state","submittingForm","handleSubmit","formData","props","match","params","slug","updatePlan","showNotification","a","async","update_plan_status","swal","title","text","plan","name","icon","closeOnClickOutside","resetUpdatePlan","history","push","nextProps","this","getPlan","resetStorePlan","container","status","is_active_unformatted","className","onSubmit","btnText","initialValues","to","type","Component","connect","PlanReducer","get_plan_status","dispatch","payload","LayoutContentStyle","styled","div","palette","module","exports","Breadcrumb","links","map","link","url","styles","item","itemTwo","join","key","defaultProps","withRouter","active","ChoseRoleReducer","role","reduxForm","form","pristine","invalid","Field","component","CustomInput","compulsory","label","validate","requiredValidator","CustomSelect","options","displayValue","value","buttonContainer","button","CustomButton","disabled"],"mappings":"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","file":"static/js/48.4543fbf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport { reset } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../../ui/Breadcrumb\";\nimport PlanForm from '../../../ui/forms/PlanForm';\nimport Loader from '../../../ui/Loader/Loader.Component';\nimport { updatePlan, resetStorePlan, getPlan, resetUpdatePlan } from '../../../shared/actions/Plan.action';\n\nclass PlanEdit extends Component {\n\n    state = {\n        submittingForm: false,\n    }\n\n    handleSubmit = formData => {\n        // this.setState({\n        //     submittingForm: true\n        // });\n        formData['slug'] = this.props.match.params.slug;\n        this.props.updatePlan(formData);\n    }\n\n    showNotification = async props => {\n        if (props.update_plan_status === 200) {\n            let alert = await swal({\n                title: \"Good job!\",\n                text: `${props.plan.name} was updated successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n            if (alert) {\n                this.props.resetUpdatePlan();\n                this.props.history.push('/dashboard/plan_all');\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.showNotification(nextProps);\n    }\n\n    componentDidMount() {\n        this.props.getPlan(this.props.match.params.slug);\n    }\n\n\n    componentWillUnmount() {\n        this.props.resetStorePlan();\n    }\n\n    render() {\n\n        let container;\n\n        if (this.props.status === 200) {\n\n            let plan = this.props.plan;\n            plan['is_active'] = this.props.plan.is_active_unformatted;\n\n            container = (\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"card card-body\">\n                            <PlanForm onSubmit={this.handleSubmit}\n                                submittingForm={this.state.submittingForm}\n                                btnText=\"Update\"\n                                initialValues={plan}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4>Create a plan</h4>\n                                </div>\n                                <div className=\"col-md-6 text-right\">\n                                    <Link className=\"\" to=\"/dashboard/plan_all\">\n                                        <button className=\"btn btn-sm btn-success\" type=\"button\">All Plan</button>\n                                    </Link>\n                                </div> \n                            </div><hr/>\n                            {container}\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    plan: state.PlanReducer.plan,\n    status: state.PlanReducer.get_plan_status,\n    update_plan_status: state.PlanReducer.update_plan_status,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getPlan: payload => dispatch(getPlan(payload)),\n    resetStorePlan: () => dispatch( resetStorePlan() ),\n    updatePlan: payload => dispatch( updatePlan(payload) ),\n    resetUpdatePlan: () => dispatch( resetUpdatePlan() )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlanEdit);","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"PlanForm.component_formContainer__3hkSG\",\"inlineGroup\":\"PlanForm.component_inlineGroup__1U21b\",\"formGroup\":\"PlanForm.component_formGroup__3fu39\",\"buttonContainer\":\"PlanForm.component_buttonContainer__2Jkk1\",\"button\":\"PlanForm.component_button__qSbFG\"};","import React from 'react';\nimport CustomInput from '../../CustomInput';\nimport CustomSelect from '../../CustomSelect';\nimport CustomButton from '../../CustomButton';\nimport { Field, reduxForm } from 'redux-form';\nimport styles from './PlanForm.component.module.css';\nimport { requiredValidator } from '../../../shared/utils/validation';\n\nconst PlanForm = ({handleSubmit, pristine, invalid, btnText, submittingForm}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <div className=\"form-group\">\n                        <Field\n                            name=\"name\"\n                            component={CustomInput}\n                            compulsory={true}\n                            type=\"text\"\n                            label=\"Name\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n                </div>\n                <div className=\"col-md-6\">\n                    <div className=\"form-group\">\n                        <Field\n                            name=\"code\"\n                            component={CustomInput}\n                            compulsory={true}\n                            type=\"text\"\n                            label=\"Code\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"col-md-6\">\n                    <div className=\"form-group\">\n                        <Field\n                            name=\"is_active\"\n                            component={CustomSelect}\n                            compulsory={true}\n                            label=\"Status\"\n                            validate={[requiredValidator]}\n                            options={[\n                                {\n                                    displayValue: 'Active',\n                                    value: 1\n                                },\n                                {\n                                    displayValue: 'Inactive',\n                                    value: 0\n                                },\n                            ]}\n                        />\n                    </div>\n                </div>\n            </div><hr/>\n\n            <div className={styles.buttonContainer}>\n                <div className={styles.button}>\n                    <CustomButton submittingForm={submittingForm} disabled={invalid || pristine}>{btnText}</CustomButton>\n                </div>\n            </div>\n        </form>\n    );\n}\n\nexport default reduxForm({\n    form: 'PlanForm'\n})(PlanForm);","export { default } from './PlanForm.component';"],"sourceRoot":""}