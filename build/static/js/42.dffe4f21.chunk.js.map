{"version":3,"sources":["pages/Role/Add/RoleAdd.js","../node_modules/redux-form/es/index.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js","ui/forms/RoleForm/RoleForm.component.module.css","ui/forms/RoleForm/RoleForm.component.js","ui/forms/RoleForm/index.js"],"names":["RoleAdd","state","submittingForm","handleSubmit","formData","setState","props","storeRole","showNotification","a","async","status","reset","swal","title","text","role","name","icon","closeOnClickOutside","resetStoreRole","nextProps","this","getAllPermissions","className","get_permissions_status","to","type","style","width","onSubmit","permissions","role_permissions","btnText","Component","connect","RoleReducer","store_role_status","message","store_role_message","PermissionReducer","dispatch","payload","actions","arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","autofill","blur","change","clearAsyncError","clearFields","clearSubmit","clearSubmitErrors","destroy","focus","initialize","registerField","resetSection","setSubmitFailed","setSubmitSucceeded","startAsyncValidation","startSubmit","stopAsyncValidation","stopSubmit","submit","touch","unregisterField","untouch","updateSyncWarnings","updateSyncErrors","LayoutContentStyle","styled","div","palette","module","exports","Breadcrumb","links","map","link","url","styles","item","itemTwo","join","key","defaultProps","withRouter","active","ChoseRoleReducer","RoleForm","setPermissions","role_permission","permission","id","includes","permissionHandler","index","newPermissions","filter","is_picked","pristine","invalid","checked","aria-hidden","onClick","description","Field","component","CustomInput","label","validate","requiredValidator","questionHeader","buttonContainer","button","CustomButton","disabled","React","reduxForm","form"],"mappings":"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","file":"static/js/42.dffe4f21.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport { reset } from 'redux-form';\nimport { connect } from 'react-redux';\nimport {Card} from 'antd';\nimport { Link } from 'react-router-dom';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../../ui/Breadcrumb\";\nimport Loader from '../../../ui/Loader/Loader.Component';\nimport RoleForm from '../../../ui/forms/RoleForm';\nimport { getAllPermissions } from '../../../shared/actions/Permission.action';\nimport { storeRole, resetStoreRole } from '../../../shared/actions/Role.action';\n\nclass RoleAdd extends Component {\n\n    state = {\n        submittingForm: false,\n    }\n\n    handleSubmit = formData => {\n        this.setState({\n            submittingForm: true\n        });\n        this.props.storeRole(formData);\n    }\n\n    showNotification = async props => {\n        if (props.status === 200) {\n            this.props.reset('RoleForm');\n            let alert = await swal({\n                title: \"Good job!\",\n                text: `${props.role.name} was created successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n            if (alert) {\n                this.props.resetStoreRole();\n            }\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.showNotification(nextProps);\n    }\n\n    componentDidMount() {\n        this.props.getAllPermissions();\n    }\n\n    render() {\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4>Role Upload</h4>\n                                </div>\n                                {this.props.get_permissions_status === 200 && (\n                                    <div className=\"col-md-6 text-right\">\n                                        <Link className=\"\" to=\"/dashboard/role_all\">\n                                            <button className=\"btn btn-sm btn-success\" type=\"button\">All Role</button>\n                                        </Link>\n                                    </div> \n                                )}\n                            </div><hr/>\n                            <div className=\"row\">\n                                {this.props.get_permissions_status === 200 && (\n                                    <div className=\"col-md-12\">\n                                        <Card style={{width: '100%'}}>\n                                            <RoleForm onSubmit={this.handleSubmit}\n                                                permissions={this.props.permissions}\n                                                role_permissions={[]}\n                                                submittingForm={this.state.submittingForm}\n                                                btnText=\"Add\"\n                                            />\n                                        </Card>\n                                    </div>\n                                )}\n                            </div>\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    role: state.RoleReducer.role,\n    status: state.RoleReducer.store_role_status,\n    message: state.RoleReducer.store_role_message,\n    permissions: state.PermissionReducer.permissions,\n    get_permissions_status: state.PermissionReducer.get_permissions_status\n});\n\nconst mapDispatchToProps = dispatch => ({\n    reset: payload => dispatch( reset(payload) ),\n    resetStoreRole: () => dispatch( resetStoreRole() ),\n    storeRole: payload => dispatch( storeRole(payload) ),\n    getAllPermissions: () => dispatch( getAllPermissions() )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoleAdd);","import actions from './actions';\nimport * as _actionTypes from './actionTypes';\nexport { ReduxFormContext } from './ReduxFormContext';\nexport { default as defaultShouldAsyncValidate } from './defaultShouldAsyncValidate';\nexport { default as defaultShouldValidate } from './defaultShouldValidate';\nexport { default as defaultShouldError } from './defaultShouldError';\nexport { default as defaultShouldWarn } from './defaultShouldWarn';\nexport { default as Form } from './Form';\nexport { default as FormName } from './FormName';\nexport { default as FormSection } from './FormSection';\nexport { default as SubmissionError } from './SubmissionError'; // alias for propTypes\n\nexport { default as propTypes, fieldInputPropTypes, fieldMetaPropTypes, fieldPropTypes, fieldArrayFieldsPropTypes, fieldArrayMetaPropTypes, fieldArrayPropTypes, formPropTypes } from './propTypes';\nexport { default as Field } from './Field';\nexport { default as Fields } from './Fields';\nexport { default as FieldArray } from './FieldArray';\nexport { default as formValueSelector } from './formValueSelector';\nexport { default as formValues } from './formValues';\nexport { default as getFormError } from './getFormError';\nexport { default as getFormNames } from './getFormNames';\nexport { default as getFormValues } from './getFormValues';\nexport { default as getFormInitialValues } from './getFormInitialValues';\nexport { default as getFormSyncErrors } from './getFormSyncErrors';\nexport { default as getFormMeta } from './getFormMeta';\nexport { default as getFormAsyncErrors } from './getFormAsyncErrors';\nexport { default as getFormSyncWarnings } from './getFormSyncWarnings';\nexport { default as getFormSubmitErrors } from './getFormSubmitErrors';\nexport { default as isAsyncValidating } from './isAsyncValidating';\nexport { default as isDirty } from './isDirty';\nexport { default as isInvalid } from './isInvalid';\nexport { default as isPristine } from './isPristine';\nexport { default as isValid } from './isValid';\nexport { default as isSubmitting } from './isSubmitting';\nexport { default as hasSubmitSucceeded } from './hasSubmitSucceeded';\nexport { default as hasSubmitFailed } from './hasSubmitFailed';\nexport { default as reduxForm } from './reduxForm';\nexport { default as reducer } from './reducer';\nexport { default as values } from './values';\nexport var actionTypes = _actionTypes;\nexport var arrayInsert = actions.arrayInsert;\nexport var arrayMove = actions.arrayMove;\nexport var arrayPop = actions.arrayPop;\nexport var arrayPush = actions.arrayPush;\nexport var arrayRemove = actions.arrayRemove;\nexport var arrayRemoveAll = actions.arrayRemoveAll;\nexport var arrayShift = actions.arrayShift;\nexport var arraySplice = actions.arraySplice;\nexport var arraySwap = actions.arraySwap;\nexport var arrayUnshift = actions.arrayUnshift;\nexport var autofill = actions.autofill;\nexport var blur = actions.blur;\nexport var change = actions.change;\nexport var clearAsyncError = actions.clearAsyncError;\nexport var clearFields = actions.clearFields;\nexport var clearSubmit = actions.clearSubmit;\nexport var clearSubmitErrors = actions.clearSubmitErrors;\nexport var destroy = actions.destroy;\nexport var focus = actions.focus;\nexport var initialize = actions.initialize;\nexport var registerField = actions.registerField;\nexport var reset = actions.reset;\nexport var resetSection = actions.resetSection;\nexport var setSubmitFailed = actions.setSubmitFailed;\nexport var setSubmitSucceeded = actions.setSubmitSucceeded;\nexport var startAsyncValidation = actions.startAsyncValidation;\nexport var startSubmit = actions.startSubmit;\nexport var stopAsyncValidation = actions.stopAsyncValidation;\nexport var stopSubmit = actions.stopSubmit;\nexport var submit = actions.submit;\nexport var touch = actions.touch;\nexport var unregisterField = actions.unregisterField;\nexport var untouch = actions.untouch;\nexport var updateSyncWarnings = actions.updateSyncWarnings;\nexport var updateSyncErrors = actions.updateSyncErrors;","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"RoleForm.component_formContainer__1Ligp\",\"permission\":\"RoleForm.component_permission__3nmHY\",\"questionHeader\":\"RoleForm.component_questionHeader__12_ym\",\"inlineGroup\":\"RoleForm.component_inlineGroup__1Pwgu\",\"formGroup\":\"RoleForm.component_formGroup__2T-2t\",\"buttonContainer\":\"RoleForm.component_buttonContainer__1kd2W\",\"button\":\"RoleForm.component_button__sU5AB\"};","import React from 'react';\nimport {Card} from 'antd';\nimport CustomInput from '../../CustomInput';\nimport CustomButton from '../../CustomButton';\nimport { Field, reduxForm } from 'redux-form';\nimport styles from './RoleForm.component.module.css';\nimport { requiredValidator } from '../../../shared/utils/validation';\n\nclass RoleForm extends React.Component {\n\n    state = {\n        permissions: []\n    }\n\n    componentDidMount() {\n        this.setPermissions();\n    }\n\n    setPermissions = () => {\n        const role_permissions = this.props.role_permissions.map(role_permission => role_permission.permission.id);\n\n        const permissions = this.props.permissions.map(permission => {\n            if (role_permissions.includes(permission.id)) {\n                permission['is_picked'] = true;\n            } else {\n                permission['is_picked'] = false;\n            }\n            return permission;\n        });\n\n        this.setState({\n            permissions: permissions\n        });\n    }\n\n    permissionHandler = (permission, index) => {\n        permission['is_picked'] = !permission['is_picked'];\n\n        let newPermissions = [...this.state.permissions];\n        newPermissions[index] = permission;\n\n        this.setState({\n            permissions: newPermissions\n        });\n    }\n\n    handleSubmit = formData => {\n        formData['permissions'] = this.state.permissions.filter(permission => permission.is_picked).map(permission => permission.id);\n\n        this.props.submit(formData);\n    }\n\n\n    render () {\n\n        let { handleSubmit, pristine, invalid, btnText } = this.props;\n\n        let permissions = this.state.permissions.map((permission, index) => {\n\n            let checked = <i className=\"fa fa-circle-o\" aria-hidden=\"true\"></i>\n            if (permission.is_picked) {\n                checked = <i className=\"fa fa-circle\" aria-hidden=\"true\"></i>\n            }\n\n            return (\n                <tr key={permission.id} onClick={() => this.permissionHandler(permission, index)}>\n                    <td>{checked}</td>\n                    <td>{permission.name}</td>\n                    <td>{permission.url}</td>\n                    <td>{permission.description}</td>\n                </tr>\n            )\n        });\n\n\n        return (\n            <form onSubmit={handleSubmit(this.handleSubmit)}>\n                <Card style={{width:'100%'}}>\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <Field\n                                name=\"name\"\n                                component={CustomInput}\n                                type=\"text\"\n                                label=\"Name\"\n                                validate={[requiredValidator]}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <div className={styles.questionHeader}>Permissions</div>\n                            <div>\n                                <table>\n                                    <thead>\n                                        <tr>\n                                            <th>Status</th>\n                                            <th>Name</th>\n                                            <th>Url</th>\n                                            <th>Description</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        { permissions }\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </Card>\n                <div className={styles.buttonContainer}>\n                    <div className={styles.button}>\n                        <CustomButton disabled={invalid || pristine}>{btnText}</CustomButton>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default reduxForm({\n    form: 'RoleForm'\n})(RoleForm);","export { default } from './RoleForm.component';"],"sourceRoot":""}