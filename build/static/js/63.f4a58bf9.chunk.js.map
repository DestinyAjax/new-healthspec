{"version":3,"sources":["pages/ClaimService/ClaimService.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js"],"names":["ClaimService","state","submittingForm","makeDecisionWith","status","formData","props","id","match","params","slug","setState","confirmClaim","showNotificationWith","a","async","confirm_claim_status","swal","title","text","icon","closeOnClickOutside","resetClaimConfirm","getPrice","price","claim","plan_services","map","encounter_service","is_passed","Number","plan_service","quantity","getApprovedPrice","admin_passed","actual_quantity","format","changeStatusFor","role_user","role","name","window","scrollTo","top","left","behavior","openModal","EncounterService","displayStatusFor","className","this","getClaim","prevState","prevProps","decision","type","style","marginRight","onClick","links","url","width","Fragment","user","first_name","middle_name","last_name","enrollee_id","moment","date_of_birth","date","provider","code","warden","toLocaleString","authorizer","src","primary_profile_picture","key","service","marginTop","Component","connect","AuthReducer","ClaimReducer","ChoseRoleReducer","get_claim_status","dispatch","payload","modalType","modalProp","LayoutContentStyle","styled","div","palette","module","exports","Breadcrumb","link","to","styles","item","itemTwo","join","defaultProps","withRouter","active"],"mappings":"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","file":"static/js/63.f4a58bf9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport swal from 'sweetalert';\nimport {Card} from 'antd';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../ui/Breadcrumb\";\nimport { EncounterService } from '../../ui/Modal';\nimport { openModal } from '../../ui/Modal/Modal.action';\nimport { getClaim, confirmClaim, resetClaimConfirm } from '../../shared/actions/Claim.action';\nimport Loader from '../../ui/Loader/Loader.Component';\n\nclass ClaimService extends Component {\n\n    state = {\n        submittingForm: false\n    }\n\n    componentDidMount() {\n        this.props.getClaim({\n            id: this.props.match.params.slug\n        });\n    }\n\n    makeDecisionWith = status => {\n        let formData = {};\n\n        formData['status'] = status;\n        formData['authorizer_id'] = this.props.id;\n        formData['claim_id'] = this.props.match.params.slug;\n\n        this.setState({\n            submittingForm: true\n        }, () => {\n            this.props.confirmClaim(formData);\n        });\n    }\n\n    showNotificationWith = async props => {\n        if (props.confirm_claim_status === 200) {\n            let alert = await swal({\n                title: \"Good job!\",\n                text: `Claim status was updated successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n            if (alert) {\n                this.setState({\n                    submittingForm: false\n                }, () => {\n                    this.props.resetClaimConfirm();\n                });\n            }\n        }\n    }\n\n    componentDidUpdate(prevState, prevProps) {\n        if (prevState.confirm_claim_status !== this.props.confirm_claim_status) {\n            this.showNotificationWith(this.props);\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.resetClaimConfirm();\n    }\n\n    getPrice = status => {\n        let price = 0;\n\n        this.props.claim.plan_services.map(encounter_service => {\n            if (status == true) {\n                if (encounter_service.is_passed == status) {\n                    price += Number(encounter_service.plan_service.price) * encounter_service.quantity;\n                }\n            } \n            else {\n                price += Number(encounter_service.plan_service.price) * encounter_service.quantity;\n            }\n\n            return encounter_service;\n        });\n\n        return price;\n    }\n\n\n    getApprovedPrice = () => {\n        let price = 0;\n\n        if (this.props.claim.status === 1 || this.props.claim.status === 3) {\n            this.props.claim.plan_services.map(encounter_service => {\n                if (encounter_service.admin_passed == true) {\n                    price += Number(encounter_service.plan_service.price) * encounter_service.actual_quantity;\n                }\n\n                return encounter_service;\n            });\n        }\n\n        return price;\n    }\n\n\n    format = status => {\n        if (status === 0) {\n            return 'PENDING';\n        }\n        if (status === 1) {\n            return 'AUTHORIZED';\n        }\n        if (status === 2) {\n            return 'UNAUTHORIZED';\n        }\n\n        return 'PAID';\n    }\n\n\n    changeStatusFor = encounter_service => {\n        if (((this.props.role_user.role.name == 'TENANT_ADMIN') || (this.props.role_user.role.name == 'AGENT')) && this.props.claim.status == 0) {\n            window.scrollTo({\n                top: 0,\n                left: 0,\n                behavior: 'smooth'\n            });\n\n            this.props.openModal(EncounterService, {\n                claim: this.props.claim,\n                encounter_service: encounter_service\n            });\n        }\n    }\n\n    displayStatusFor = status => {\n        return status === 0 ? <div className=\"\">Inactive</div> : <div className=\"\">Active</div>;\n    }\n\n    render() {\n        let decision;\n\n        if (this.props.status === 200) {\n            let {claim} = this.props;\n\n            if (claim.status === 0) {\n                if ((this.props.role_user.role.name == 'TENANT_ADMIN') || (this.props.role_user.role.name == 'AGENT')) {\n                    decision = (\n                        <div className=\"row\">\n                            <div className=\"col-md-12\" >\n                                <button type=\"button\" className=\"btn btn-sm btn-danger\" style={{marginRight: 10}} onClick={() => this.makeDecisionWith(2)}>Reject</button>\n                                <button type=\"button\" onClick={() => this.makeDecisionWith(1)} className=\"btn btn-sm btn-success\">Confirm</button>\n                            </div>\n                        </div>\n                    );\n                }\n            }\n        }\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <Breadcrumb links={[\n                                        {\n                                            url: '/dashboard/claim_all',\n                                            name: 'All Claims'\n                                        },\n                                    ]} />\n                                </div>\n                            </div><hr/>\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <Card style={{width: '100%'}} title=\"Claim - Osun Health Insurance Scheme\">\n                                        \n                                        {this.props.status === 200 && (\n                                            <React.Fragment>\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-5\">\n                                                        <table className=\"table table-striped\">\n                                                            <tr><th>Enrollee Name:</th><td>{this.props.claim.user.first_name} {this.props.claim.user.middle_name} {this.props.claim.user.last_name}</td></tr>\n                                                            <tr><th>Enrollee ID:</th><td>{this.props.claim.user.enrollee_id}</td></tr>\n                                                            <tr><th>Date: </th><td>{moment(this.props.claim.user.date_of_birth.date).format('Do MMMM YYYY')}</td></tr>\n                                                        </table>\n\n                                                        <table className=\"table table-striped\">\n                                                            <tr><th>Provider Name: </th><td>{this.props.claim.provider.name}</td></tr>\n                                                            <tr><th>Provider Code:</th><td>{this.props.claim.provider.code}</td></tr>\n                                                            <tr><th>Warden: </th><td>{this.props.claim.provider.warden}</td></tr>\n                                                        </table>\n                                                    </div>\n                                                    <div className=\"col-md-4\">\n                                                        <table className=\"table table-striped\">\n                                                            <tr><th>Status: </th><td>{this.format(this.props.claim.status)}</td></tr>\n                                                            <tr><th>Total Price: </th><td>&#8358; {Number(this.getPrice(false)).toLocaleString()}</td></tr>\n                                                            <tr><th>Passed Price: </th><td>&#8358; {Number(this.getPrice(true)).toLocaleString()}</td></tr>\n                                                            <tr><th>Approved Price: </th><td>&#8358; {Number(this.getApprovedPrice()).toLocaleString()}</td></tr>\n                                                        </table>\n                                                        {this.props.claim.authorizer != null && (\n                                                            <table className=\"table table-striped\">\n                                                                <tr><th>Verifier Name:</th><td>{this.props.claim.authorizer.first_name} {this.props.claim.authorizer.middle_name} {this.props.claim.authorizer.last_name}</td></tr>\n                                                            </table>\n                                                        )}\n                                                    </div>\n                                                    <div className=\"col-md-3\">\n                                                        <img src={this.props.claim.user.primary_profile_picture} />\n                                                    </div>\n                                                </div><br/>\n                                                <div className=\"row\">\n                                                    <div className=\"col-md-12\">\n                                                    <table className={\"table table-striped\"}>\n                                                        <thead>\n                                                            <tr>\n                                                                <th>S/N</th>\n                                                                <th>Service</th>\n                                                                <th>Unit Price</th>\n                                                                <th>Quantity</th>\n                                                                <th>Total</th>\n                                                                <th>Admin Quantity</th>\n                                                                <th>Admin Total</th>\n                                                                <th>Status</th>\n                                                                <th>Admin Status</th>\n                                                            </tr>\n                                                        </thead>\n                                                        <tbody>\n                                                            {this.props.claim.plan_services.map(encounter_service => (\n                                                                <tr key={encounter_service.plan_service.service.id} onClick={() => this.changeStatusFor(encounter_service)}>\n                                                                    <td>{encounter_service.plan_service.service.id}</td>\n                                                                    <td>{encounter_service.plan_service.service.name}</td>\n                                                                    <td>&#8358; {Number(encounter_service.plan_service.price).toLocaleString()}</td>\n                                                                    <td>{encounter_service.quantity}</td>\n                                                                    <td>&#8358; {Number(encounter_service.plan_service.price * encounter_service.quantity).toLocaleString()}</td>\n                                                                    <td>{encounter_service.actual_quantity}</td>\n                                                                    <td>&#8358; {Number(encounter_service.plan_service.price * encounter_service.actual_quantity).toLocaleString()}</td>\n                                                                    <td>{this.displayStatusFor(encounter_service.is_passed)}</td>\n                                                                    <td>{this.displayStatusFor(encounter_service.admin_passed)}</td>\n                                                                </tr>\n                                                            ))}\n                                                        </tbody>\n                                                    </table>\n                                                    </div>\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n\\                                       <div style={{marginTop:'30px'}}>{decision}</div>\n                                    </Card>\n                                </div>\n                            </div>\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    id: state.AuthReducer.id,\n    claim: state.ClaimReducer.claim,\n    role_user: state.ChoseRoleReducer.role,\n    status: state.ClaimReducer.get_claim_status,\n    confirm_claim_status: state.ClaimReducer.confirm_claim_status,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getClaim: payload => dispatch( getClaim(payload) ),\n    resetClaimConfirm: () => dispatch( resetClaimConfirm() ),\n    confirmClaim: payload => dispatch( confirmClaim(payload) ),\n    openModal: (modalType, modalProp) => dispatch(openModal(modalType, modalProp)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimService);","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';"],"sourceRoot":""}