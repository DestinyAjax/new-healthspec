{"version":3,"sources":["pages/Role/All/RoleAll.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js","ui/Datatable/SearchForm.component.js","ui/Datatable/Datatable.style.js","ui/Datatable/Datatable.component.js","ui/Datatable/index.js","ui/Spinner/Spinner.component.module.css","ui/Spinner/Spinner.component.js","ui/Spinner/index.js"],"names":["PlanAll","state","meta","current_page","showNotificationFrom","nextProps","a","async","delete_role_status","swal","title","text","icon","closeOnClickOutside","props","resetStoreRole","getNewRolesWith","page_number","getRoles","delete","role","user_count","name","type","buttons","dangerMode","deleteRole","slug","edit","history","push","this","setState","pageNumbers","i","Math","ceil","total","per_page","renderPageNumbers","map","number","classes","key","className","onClick","status","roles","length","to","style","width","id","permission_roles","last_page","Component","connect","PlanReducer","plans","get_plans_status","delete_plan_status","dispatch","payload","LayoutContentStyle","styled","div","palette","module","exports","Breadcrumb","links","link","url","styles","item","itemTwo","join","defaultProps","withRouter","active","ChoseRoleReducer","reduxForm","form","onChangeHandler","Field","component","CustomInput","placeholder","validate","onChange","event","target","value","DatatableStyleWrapper","WithDirection","Datatable","data","loading","total_pages","active_data","show_actions","query","get","end_point","getStorage","token","fetch","method","headers","handleSearch","searchable","columns","filter","column","search_key","response","json","reset","detectQueryString","RegExp","test","fetchData","request","tableData","table","index","getPaginated","selected","row","console","log","JSON","stringify","actions","action","handle","customswal","content","param","newData","tableList","aria-hidden","is_selected","col","container","colSpan","Fragment","searchForm","hideSearch","onRow","record","rowIndex","dataSource","pagination","React","Spinner","message"],"mappings":"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","file":"static/js/43.c4f5924a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {Card} from 'antd';\nimport Spinner from '../../../ui/Spinner';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../../ui/Breadcrumb\";\nimport Datatable from '../../../ui/Datatable';\nimport Loader from '../../../ui/Loader/Loader.Component';\nimport { getRoles, resetStoreRole, deleteRole } from '../../../shared/actions/Role.action';\n\nclass PlanAll extends Component {\n\n    state = {\n        meta: {},\n        current_page: 1,\n    }\n\n    componentDidMount() {\n        this.props.getRoles(1);\n    }\n\n    showNotificationFrom = async nextProps => {\n        if (nextProps.delete_role_status === 200) {\n            let alert = await swal({\n                title: \"Good job!\",\n                text: `Role was deleted successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n\n            if (alert) {\n                this.props.resetStoreRole();\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.showNotificationFrom(nextProps);\n        this.setState({\n            meta: nextProps.meta,\n            current_page: nextProps.meta.current_page\n        });\n    }\n\n\n    getNewRolesWith = page_number => {\n        this.props.getRoles(page_number);\n    }\n\n    delete = async role => {\n        if (role.user_count > 0) return;\n\n        let alert = await swal({\n            title: `Are you sure you want to delete [${role.name}]`,\n            type: 'warning',\n            buttons: [\n                'No',\n                'Yes, I am sure!'\n            ],\n            dangerMode: true,\n        });\n\n        if (alert) {\n            this.props.deleteRole({\n                slug: role.slug,\n            });\n        }\n    }\n\n    edit = role => {\n        this.props.history.push(`/role_edit_${role.slug}`);\n    }\n\n    render() {\n        \n        // Logic for displaying page numbers\n        const pageNumbers = [];\n        for (let i = 1; i <= Math.ceil(this.state.meta.total / this.state.meta.per_page); i++) {\n            pageNumbers.push(i);\n        }\n\n        const renderPageNumbers = pageNumbers.map(number => {\n            let classes = this.state.current_page === number ? 'active' : '';\n\n            if (number == 1 || number == this.state.meta.total || (number >= this.state.current_page - 2 && number <= this.state.current_page + 2)) {\n                return (\n                    <span key={number} className={classes} onClick={() => this.getNewRolesWith(number)}>{number}</span>\n                );\n            }\n        });\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4>All Roles</h4>\n                                </div>\n                                <div className=\"col-md-6 text-right\">\n                                    {this.props.status === 200 && !this.props.roles.length && (\n                                        <Link className=\"\" to=\"/dashboard/plan_add\">\n                                            <button className=\"btn btn-sm btn-success\" type=\"button\">Create Role</button>\n                                        </Link>\n                                    )}\n                                </div> \n                            </div><hr/>\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <Card style={{width: '100%'}}>\n                                        <table className=\"table table-striped\">\n                                            <thead>\n                                                <tr>\n                                                    <th>S/N</th>\n                                                    <th>Name</th>\n                                                    <th>Permissions Count</th>\n                                                    <th>Action</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {this.props.status === 200 && this.props.roles.length && (\n                                                    this.props.roles.map(role => (\n                                                        <tr key={role.id}>\n                                                            <td>{ role.id }</td>\n                                                            <td>\n                                                                <div className=\"tTitle\">\n                                                                    <div className=\"head\">{role.name}</div>\n                                                                    <div className=\"sub\">{role.user_count} user(s)</div>\n                                                                </div>\n                                                            </td>\n                                                            <td>{role.permission_roles.length}</td>\n                                                            <td>\n                                                                <span className=\"action\" onClick={() => this.delete(role)}><i className=\"fa fa-trash\"></i></span>\n                                                                <span className=\"action\" onClick={() => this.edit(role)}><i className=\"fa fa-edit\"></i></span>\n                                                            </td>\n                                                        </tr>\n                                                    ))\n                                                )}\n                                            </tbody>\n                                        </table>\n                                        <div className=\"pagination\">\n                                            <span onClick={() => this.getNewRolesWith(1)}>&laquo;</span>\n                                            {renderPageNumbers}\n                                            <span onClick={() => this.getNewRolesWith(this.props.meta.last_page)}>&raquo;</span>\n                                        </div>\n                                    </Card>\n                                </div>\n                            </div>\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    meta: state.PlanReducer.meta,\n    plans: state.PlanReducer.plans,\n    status: state.PlanReducer.get_plans_status,\n    delete_plan_status: state.PlanReducer.delete_plan_status,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getRoles: payload => dispatch( getRoles(payload) ),\n    resetStoreRole: () => dispatch( resetStoreRole() ),\n    deleteRole: payload => dispatch( deleteRole(payload) )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlanAll);","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';","import React from 'react';\nimport CustomInput from '../CustomInput';\nimport { Field, reduxForm } from 'redux-form';\n// import { requiredValidator } from '../../../shared/utils/validation';\n\n\nconst SearchForm = props => {\n\n    const { onChangeHandler } = props\n\n    const onNameChanged = event => {\n        onChangeHandler(event.target.value);\n    }\n\n    return (\n        <form>\n            <Field\n                name=\"value\"\n                component={CustomInput}\n                type=\"text\"\n                placeholder=\"Search\"\n                validate={[]}\n                onChange={onNameChanged}\n            />\n        </form>\n    )\n\n}\n\nexport default reduxForm({\n    form: 'SearchForm'\n})(SearchForm);","import styled from 'styled-components';\nimport WithDirection from '@iso/lib/helpers/rtl';\n\nconst DatatableStyleWrapper = styled.div`\n  \n  .pagination {\n    margin-top: 25px !important;\n  }\n\n  .pagination span {\n    cursor: pointer;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color .3s;\n    border: 1px solid #ddd;\n  }\n\n  .pagination span.active {\n    background-color: #15974b;\n    color: white;\n    border: 1px solid #15974b;\n  }\n\n.center {\n  text-align: center;\n}\n.actions {\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 10px;\n}\n.actions2 {\n  width: 50%;\n  margin: 15px auto;\n}\n\n.action {\n    opacity: 1;\n    display: block;\n    font-size: 12px;\n    cursor: pointer;\n    padding: 10px 10px;\n\n    color: #FFFFFF;\n    border-radius: 5px;\n    letter-spacing: 0.29px;\n    transition: all 0.3s ease 0s;\n    border: 1px solid transparent;\n\n    margin-bottom: 15px;\n}\n.delete {\n  opacity: .8;\n  background: #e43829;\n}\n.edit {\n  opacity: .8;\n  background: #ffca28;\n}\n.view {\n  opacity: .8;\n  background: #15974b;\n}\n.search {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  padding: 5px 5px;\n  /* background: #eceeef; */\n  margin-bottom: 15px;\n}\n.field,\n.comparison {\n  width: 14%;\n}\n.form {\n  width: 30%;\n}\n.filter {\n  width: 10%;\n}\n.button {\n  width: 100%;\n  display: block;\n  background: #eceeef;\n  padding: 5px 5px;\n  border-radius: 5px;\n  text-align: center;\n  margin-top: 7px;\n}\n\n`;\n\nexport default WithDirection(DatatableStyleWrapper);\n","import React from 'react';\nimport swal from 'sweetalert';\nimport { Table, Tag } from 'antd';\n// import Filter from './Filter.component';\nimport { withRouter } from 'react-router-dom';\nimport SearchForm from './SearchForm.component';\nimport customswal from '@sweetalert/with-react';\nimport { getStorage } from '../../shared/utils/storage';\nimport { url } from './../../config';\n\nimport DatatableStyleWrapper from './Datatable.style';\n\nclass Datatable extends React.Component {\n\n    state = {\n        data: [],\n        per_page: 20,\n        last_page: 0,\n        loading: true,\n        total_pages: 0,\n        current_page: 0,\n        active_data: null,\n        show_actions: false,\n        query: ''\n    };\n\n    get = async end_point => {\n        let token = await getStorage('ohis:auth_token');\n\n        return fetch(url + end_point, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                \"AuthorizationHeader\": \"Bearer OSUN_1234567890987654321\",\n                'AuthToken': token\n            },\n        });\n    }\n\n    handleSearch = async value => {\n        let searchable = this.props.columns.filter(column => column.searchable).map(column => column.search_key).join(\"*\");\n        let query = `${searchable}:${value}`;\n\n        let response = await this.get(`${this.props.url}?search=${query}`);\n        const data = await response.json();\n\n        this.reset(data);\n    }\n\n    detectQueryString = (url) => {\n        // get the current URL\n\n        // regex pattern for detecting ? character\n        var pattern = new RegExp(/\\?.+=.*/g);\n\n        return pattern.test(url);\n    }\n\n    fetchData = async (url, page_number) => {\n        let request;\n        this.setState({ loading: true });\n        if (this.detectQueryString(url)) request = this.get(`${url}&page=${page_number}`);\n        else request = this.get(`${url}?page=${page_number}`);\n        //make http request\n        let response = await request;\n        const data = await response.json();\n\n        this.reset(data);\n    }\n\n    reset = data => {\n        let newData, total_pages, last_page, current_page;\n        let tableData = [];\n        \n        if (data.data) {\n            newData = data.data.map(data => {\n                data['is_selected'] = false;\n                return data;\n            });\n            newData.map((table,index) => {\n                table['key'] = table.id\n                tableData.push(table);\n            });\n            total_pages = data.meta.total;\n            last_page = data.meta.last_page;\n            current_page = data.meta.current_page;\n        } else {\n            newData = [];\n            total_pages = 0;\n            last_page = 0;\n            current_page = 0;\n        }\n\n        this.setState({\n            data: tableData,\n            loading: false,\n            total_pages: total_pages,\n            last_page: last_page,\n            current_page: current_page\n        });\n    }\n\n    componentDidMount() {\n        this.fetchData(this.props.url, 1);\n    }\n\n    getPaginated = page_number => {\n        this.fetchData(this.props.url, page_number);\n    }\n\n    selected = row => {\n        console.log(JSON.stringify(row));\n        let tableData = [];\n        let newData = this.state.data.map(data => {\n            data['is_selected'] = false;\n\n            if (row.id === data.id) {\n                data['is_selected'] = true;\n            }\n\n            return data;\n        });\n\n        newData.map((table,index) => {\n            table['key'] = table.id\n            tableData.push(table);\n        });\n\n        this.setState({\n            data: tableData,\n            active_data: row,\n            show_actions: true\n        }, async () => {\n            if (this.props.actions.length) {\n                let actions = this.props.actions.map((action, index) => {\n\n                    let classes = `action delete`;\n\n                    if (action.type === 'edit') {\n                        classes = `action edit`;\n                    }\n\n                    if (action.type === 'view') {\n                        classes = `action view`;\n                    }\n\n\n                    return (\n                        <div key={index} className={classes} onClick={() => this.handle(action)}>\n                            {action.title}\n                        </div>\n                    )\n                });\n\n                customswal({\n                    content: (\n                        <div>\n                            <h1>Action List(s)</h1>\n                            <div className=\"actions2\">\n                                {actions}\n                            </div>\n                        </div>\n                    ),\n                    buttons: false,\n                });\n            }\n        });\n    }\n\n    delete = async (key, url) => {\n        //set is deleting status on the particular table\n        // let newData = data.data.map(data => {\n        //     data['is_selected'] = false;\n        //     return data;\n        // });\n        // this.setState({\n        //     data: newData,\n        // });\n\n        let param = this.state.active_data[key];\n\n        let response = await this.get(`${url}${param}`);\n        const data = await response.json();\n\n\n        if (data.status === 200) {\n            let newData = [...this.state.data].filter(data => {\n                return param !== data[key]\n            });\n\n            this.setState({\n                data: newData,\n            });\n        }\n    }\n\n    handle = async ({ type, url, key }) => {\n        let alert = await swal({\n            title: `Are you sure you want to ${type}`,\n            type: 'warning',\n            buttons: [\n                'No',\n                'Yes, I am sure!'\n            ],\n        });\n        if (alert) {\n            if (type === 'delete') {\n                this.delete(key, url);\n            }\n            //edit\n            if (type === 'edit') {\n                let param = this.state.active_data[key];\n                return this.props.history.push(`${url}${param}`);\n            }\n            if (type === 'view') {\n                let param = this.state.active_data[key];\n                return this.props.history.push(`${url}${param}`);\n            }\n        }\n    }\n\n    tableList = () => {\n        let values = [];\n\n        if (this.state.data.length) {\n            return this.state.data.map(row => {\n                let icon = <i className=\"fa fa-circle-thin\" aria-hidden=\"true\"></i>\n\n                if (row.is_selected) {\n                    icon = <i className=\"fa fa-circle\" aria-hidden=\"true\"></i>\n                }\n\n                return (\n                    <tr key={row.id} onClick={() => this.selected(row)}>\n                        <td>{icon}</td>\n                        {this.props.columns.map(col =>\n                            <td key={col.key}>\n                                {row[col.key]}\n                            </td>\n                        )}\n                    </tr>\n                )\n            });\n        }\n\n        let container = (\n            <tr>\n                <td colSpan={this.props.columns.length + 1} className=\"center\">No Records Found.</td>\n            </tr>\n        )\n\n        if (this.state.loading) {\n            container = (\n                <tr>\n                    <td colSpan={this.props.columns.length + 1} className=\"center\">Slow network, Loading...</td>\n                </tr>\n            )\n        }\n\n        return (\n            <React.Fragment>\n                {container}\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const pageNumbers = [];\n        for (let i = 1; i <= Math.ceil(this.state.total_pages / this.state.per_page); i++) {\n            pageNumbers.push(i);\n        }\n\n        const renderPageNumbers = pageNumbers.map(number => {\n            let classes = this.state.current_page === number ? 'active' : '';\n\n            if (number == 1 || number == this.state.total_pages || (number >= this.state.current_page - 2 && number <= this.state.current_page + 2)) {\n                return (\n                    <span key={number} className={classes} onClick={() => this.getPaginated(number)}>{number}</span>\n                );\n            }\n        });\n\n        let searchForm;\n\n        if (!this.props.hideSearch) {\n            searchForm = (\n                <SearchForm onChangeHandler={this.handleSearch} />\n            )\n        }\n\n        return (\n            <React.Fragment>\n                <DatatableStyleWrapper className=\"iosDatatableWrapper\">\n                    {searchForm}\n                    <Table \n                        onRow={(record, rowIndex) => {\n                            return {\n                                onClick: event => {this.selected(record)},\n                            };\n                        }}                \n                        columns={this.props.columns} \n                        dataSource={this.state.data} \n                        pagination={false}\n                    />\n                    \n                    {/* <table className={['table', 'table-striped', 'table-hover'].join(' ')}>\n                        <thead>\n                            <tr>\n                            <th></th>\n                            {this.props.columns.map((column, index) => <th key={index}>{column.title}</th>)}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.tableList()}\n                        </tbody>\n                    </table> */}\n                    <div className=\"pagination\">\n                        <span onClick={() => this.getPaginated(1)}>&laquo;</span>\n                        {renderPageNumbers}\n                        <span onClick={() => this.getPaginated(this.props.last_page)}>&raquo;</span>\n                    </div>\n                </DatatableStyleWrapper>\n            </React.Fragment>\n        );\n    };\n}\n\nDatatable.defaultProps = {\n    hideSearch: false\n}\n\nexport default withRouter(Datatable);","export { default } from './Datatable.component';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Spinner.component_container__W-GWN\",\"content\":\"Spinner.component_content__11MBV\",\"message\":\"Spinner.component_message__3kFxw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Spinner.component.module.css';\n\nconst Spinner = ({message}) => (\n\t<div className={styles.container}>\n\t\t<div className={styles.content}>\n\t\t\t<i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\n\t\t\t<div className={styles.message}>\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\n\nSpinner.defaultProps = {\n\tmessage: 'Loading'\n};\n\nexport default Spinner;","export { default } from './Spinner.component.js';"],"sourceRoot":""}