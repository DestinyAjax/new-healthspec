{"version":3,"sources":["pages/Claims/All/ClaimsAll.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Spinner/Spinner.component.module.css","ui/Spinner/Spinner.component.js","ui/Spinner/index.js","ui/EmptyState/EmptyState.component.module.css","ui/EmptyState/EmptyState.component.js","ui/EmptyState/index.js"],"names":["ClaimsAll","state","meta","current_page","getAllClaims","number","props","role_user","role","name","page_number","id","organization_profile","markAsPaid","claim","status","formData","setState","submittingForm","confirmClaim","getPrice","price","plan_services","map","encounter_service","admin_passed","Number","plan_service","actual_quantity","is_passed","quantity","getNewClaimsWith","navigateWith","history","push","displayStatusFrom","display","className","this","nextProps","confirm_claim_status","swal","title","text","icon","closeOnClickOutside","resetClaimConfirm","pageNumbers","i","Math","ceil","total","per_page","renderPageNumbers","classes","key","onClick","container","claims","length","Fragment","message","src","user","primary_profile_picture","first_name","middle_name","last_name","enrollee_id","provider","logo","code","toLocaleString","last_page","Component","connect","ChoseRoleReducer","ClaimReducer","get_claims_status","dispatch","payload","LayoutContentStyle","styled","div","palette","module","exports","Spinner","styles","content","defaultProps","EmptyState"],"mappings":"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","file":"static/js/46.316d0ed5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport {connect} from 'react-redux';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../../containers/Dashboard/Dashboard';\nimport EmptyState from '../../../ui/EmptyState';\nimport Spinner from '../../../ui/Spinner';\nimport Loader from '../../../ui/Loader/Loader.Component';\nimport { getAllClaims, confirmClaim, resetClaimConfirm } from '../../../shared/actions/Claim.action';\n\nclass ClaimsAll extends Component {\n\n    state = {\n        meta: {},\n        current_page: 1\n    }\n\n    componentDidMount() {\n        this.getAllClaims(1);\n    }\n\n    getAllClaims = number => {\n        if (this.props.role_user.role.name == 'PROVIDER_ADMIN') {\n            return this.props.getAllClaims({\n                page_number: 1,\n                role: this.props.role_user.role.name,\n                id: this.props.role_user.organization_profile.id,\n            });\n        }\n\n        return this.props.getAllClaims({\n            id: 1,\n            page_number: number,\n            role: 'TENANT_ADMIN'\n        });\n    }\n\n    async componentWillReceiveProps(nextProps) {\n        this.setState({\n            meta: nextProps.meta,\n            current_page: nextProps.meta.current_page\n        });\n\n        if (nextProps.confirm_claim_status != this.props.confirm_claim_status) {\n            if (nextProps.confirm_claim_status === 200) {\n                let alert = await swal({\n                    title: \"Good job!\",\n                    text: `Claim status was updated successfully!`,\n                    icon: \"success\",\n                    closeOnClickOutside: false\n                });\n\n                if (alert) {\n                    this.setState({\n                        submittingForm: false\n                    }, () => {\n                        this.props.resetClaimConfirm();\n                    });\n                }\n            }\n        }\n    }\n\n    markAsPaid = claim => {\n        if ((claim.status == 1) && ((this.props.role_user.role.name == 'TENANT_ADMIN') || (this.props.role_user.role.name == 'AGENT')) ) {\n            let formData = {};\n            formData['status'] = 3;\n            formData['claim_id'] = claim.id;\n\n            this.setState({\n                submittingForm: true\n            }, () => {\n                this.props.confirmClaim(formData);\n            });\n        }\n    }\n\n\n    getPrice = (claim, status) => {\n        let price = 0;\n\n        claim.plan_services.map(encounter_service => {\n            if (status == 'admin_passed') {\n                if (encounter_service.admin_passed == true) {\n                    price += Number(encounter_service.plan_service.price) * encounter_service.actual_quantity;\n                }\n            } else {\n                if (encounter_service.is_passed == true) {\n                    price += Number(encounter_service.plan_service.price) * encounter_service.quantity;\n                }\n            }\n\n            return encounter_service;\n        });\n\n        return price;\n    }\n\n    getNewClaimsWith = page_number => {\n        this.getAllClaims(page_number);\n    }\n\n    navigateWith = claim => {\n        this.props.history.push(`/dashboard/claim_service_${claim.id}`);\n    }\n\n    displayStatusFrom = status => {\n        let display = (\n            <div className=\"pendingStatus\">\n                PENDING\n            </div>\n        )\n        if (status == 1) {\n            display = (\n                <div className=\"activeStatus\">\n                    AUTHORIZED\n                </div>\n            )\n        }\n        if (status == 2) {\n            display = (\n                <div className=\"inactiveStatus\">\n                    UNAUTHORIZED\n                </div>\n            )\n        }\n        if (status == 3) {\n            display = (\n                <div className=\"paidStatus\">\n                    PAID\n                </div>\n            )\n        }\n\n\n        return display;\n    }\n    \n    render() {\n        const pageNumbers = [];\n        for (let i = 1; i <= Math.ceil(this.state.meta.total / this.state.meta.per_page); i++) {\n            pageNumbers.push(i);\n        }\n\n        const renderPageNumbers = pageNumbers.map(number => {\n            let classes = this.state.current_page === number ? 'active' : '';\n\n            if (number == 1 || number == this.state.meta.total || (number >= this.state.current_page - 2 && number <= this.state.current_page + 2)) {\n                return (\n                    <span key={number} className={classes} onClick={() => this.getNewClaimsWith(number)}>{number}</span>\n                );\n            }\n        });\n\n\n        let container = <div className=\"text-center\"><Spinner /></div>\n\n        if (this.props.status === 200 && !this.props.claims.length) {\n            container = (\n                <React.Fragment>\n                    <div className=\"text-center\">\n                        <EmptyState message=\"No claim created yet\" />\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        if (this.props.status === 200 && this.props.claims.length) {\n            let claims = this.props.claims.map(claim => (\n                <tr key={claim.id}>\n                    <td>{claim.id}</td>\n                    <td>\n                        <div className=\"name\">\n                            <div className=\"tImage\"><img src={claim.user.primary_profile_picture} /></div>\n                            <div className=\"tTitle\">\n                                <div className=\"head\">{claim.user.first_name} {claim.user.middle_name} {claim.user.last_name}</div>\n                                <div className=\"sub\">{claim.user.enrollee_id}</div>\n                            </div>\n                        </div>\n                    </td>\n                    <td>\n                        <div className=\"name\">\n                            <div className=\"tImage\"><img src={claim.provider.logo} /></div>\n                            <div className=\"tTitle\">\n                                <div className=\"head\">{claim.provider.name}</div>\n                                <div className=\"sub\">{claim.provider.code}</div>\n                            </div>\n                        </div>\n                    </td>\n                    <td>\n                        &#8358; {Number(this.getPrice(claim, 'passed_price')).toLocaleString()}\n                    </td>\n                    <td>&#8358; {Number(this.getPrice(claim, 'admin_passed')).toLocaleString()}</td>\n                    <td onClick={() => this.markAsPaid(claim)}>{this.displayStatusFrom(claim.status)} </td>\n                    <td onClick={() => this.navigateWith(claim)}><i className={\"fa fa-eye\"}></i></td>\n                </tr>\n            ));\n\n            container = (\n                <div>\n                    <table className=\"table table-striped\">\n                        <thead>\n                            <tr>\n                                <th>S/N</th>\n                                <th>Patient</th>\n                                <th>Provider</th>\n                                <th>Passed Price</th>\n                                <th>Billable Price</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {claims}\n                            <div className=\"pagination\">\n                                <span onClick={() => this.getNewClaimsWith(1)}>&laquo;</span>\n                                {renderPageNumbers}\n                                <span onClick={() => this.getNewClaimsWith(this.props.meta.last_page)}>&raquo;</span>\n                            </div>\n                        </tbody>\n                    </table>\n                </div>\n            );\n        }\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent> \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4>Manage Claims</h4>\n                                </div>\n                            </div><hr/>\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    {container}\n                                </div>\n                            </div>\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    role_user: state.ChoseRoleReducer.role,\n    meta: state.ClaimReducer.meta,\n    claims: state.ClaimReducer.claims,\n    status: state.ClaimReducer.get_claims_status,\n    confirm_claim_status: state.ClaimReducer.confirm_claim_status\n});\n\nconst mapDispatahToProps = dispatch => ({\n    resetClaimConfirm: () => dispatch(resetClaimConfirm()),\n    confirmClaim: payload => dispatch( confirmClaim(payload) ),\n    getAllClaims: payload => dispatch( getAllClaims(payload) ),\n});\n\nexport default connect(mapStateToProps, mapDispatahToProps)(ClaimsAll);","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Spinner.component_container__W-GWN\",\"content\":\"Spinner.component_content__11MBV\",\"message\":\"Spinner.component_message__3kFxw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Spinner.component.module.css';\n\nconst Spinner = ({message}) => (\n\t<div className={styles.container}>\n\t\t<div className={styles.content}>\n\t\t\t<i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\n\t\t\t<div className={styles.message}>\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\n\nSpinner.defaultProps = {\n\tmessage: 'Loading'\n};\n\nexport default Spinner;","export { default } from './Spinner.component.js';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EmptyState.component_container__24MCK\",\"content\":\"EmptyState.component_content__2S8fd\",\"message\":\"EmptyState.component_message___WVjs\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './EmptyState.component.module.css';\n\nconst EmptyState = ({message}) => (\n\t<div className={styles.container}>\n\t\t<div className={styles.content}>\n\t\t\t<div className={styles.message}>\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\n\nEmptyState.defaultProps = {\n\tmessage: 'Data is empty'\n};\n\nexport default EmptyState;","export { default } from './EmptyState.component.js';"],"sourceRoot":""}