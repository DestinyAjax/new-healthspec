{"version":3,"sources":["ui/forms/PlanServiceForm/PlanServiceForm.component.module.css","ui/forms/PlanServiceForm/PlanServiceForm.component.js","pages/PlanServiceEdit/PlanServiceEdit.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js"],"names":["module","exports","PlanServiceForm","state","showPercentageForm","props","initialValues","payment_type","handleSubmit","formData","submit","setPaymentType","e","value","prev","type","result","setState","paymentPercentage","this","pristine","invalid","Field","name","component","CustomInput","min","max","label","validate","maxGreater100","requiredValidator","onSubmit","style","width","className","readOnly","CustomSelect","options","displayValue","onChange","styles","buttonContainer","button","CustomButton","disabled","React","Component","reduxForm","form","PlanServiceEdit","submittingForm","planService","questions","plan_service","slug","plan","id","service","updatePlanService","getPlanService","match","params","prevProps","prevState","get_plan_service_status","limit","parseFloat","price","payment_percentage","limit_type","limit_allowed","plan_id","service_id","update_plan_service_status","swal","title","text","icon","closeOnClickOutside","resetUpdatePlanService","history","push","resetGetPlanService","Dashboard","to","Fragment","btnText","connect","PlanServiceReducer","plan_service_questions","dispatch","payload","LayoutContentStyle","styled","div","palette","Breadcrumb","links","map","link","url","item","itemTwo","join","key","defaultProps","withRouter","active","ChoseRoleReducer","role"],"mappings":"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","file":"static/js/52.d290e3a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"PlanServiceForm.component_formContainer__2Ipk1\",\"questionHeader\":\"PlanServiceForm.component_questionHeader__2zODD\",\"question\":\"PlanServiceForm.component_question__1pVyk\",\"inlineGroup\":\"PlanServiceForm.component_inlineGroup__3rGGV\",\"formGroup\":\"PlanServiceForm.component_formGroup__396yG\",\"buttonContainer\":\"PlanServiceForm.component_buttonContainer__3SN2J\",\"button\":\"PlanServiceForm.component_button__2_bG5\"};","import React from 'react';\nimport {Card} from 'antd';\nimport CustomInput from '../../CustomInput';\nimport CustomSelect from '../../CustomSelect';\nimport CustomButton from '../../CustomButton';\nimport { Field, reduxForm } from 'redux-form';\nimport styles from './PlanServiceForm.component.module.css';\nimport { requiredValidator,maxGreater100 } from '../../../shared/utils/validation';\n\nclass PlanServiceForm extends React.Component {\n\n    state = {\n        showPercentageForm: (this.props.initialValues.payment_type === 'CO PAY') ? true : false\n    }\n\n    handleSubmit = formData => {\n        this.props.submit(formData);\n    }\n\n    setPaymentType = (e, value, prev, type) => {\n        let result = (value === 'CO PAY') ? true : false; \n\n        return this.setState({\n            showPercentageForm: result\n        });\n    }\n\n    render() {\n        let { pristine, invalid } = this.props;\n        let paymentPercentage;\n\n        if (this.state.showPercentageForm) {\n            paymentPercentage = (\n                <Field\n                    name=\"payment_percentage\"\n                    component={CustomInput}\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"99\"\n                    label=\"Payment Percentage\"\n                    validate={[maxGreater100,requiredValidator]}\n                />\n            )\n        }\n\n        return (\n            <form onSubmit={this.props.handleSubmit(this.handleSubmit)}>\n                <Card style={{width: '100%'}}>\n                    <div className=\"row\">\n                        <div className=\"col-md-6\">\n                            <Field\n                                name=\"plan_id\"\n                                component={CustomInput}\n                                type=\"text\"\n                                label=\"Plan\"\n                                readOnly\n                            />\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Field\n                                name=\"service_id\"\n                                component={CustomInput}\n                                type=\"text\"\n                                label=\"Service\"\n                                readOnly\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <Field\n                                name=\"limit_type\"\n                                component={CustomSelect}\n                                label=\"Limit Type\"\n                                validate={[requiredValidator]}\n                                options={[\n                                    {\n                                        displayValue: 'Day',\n                                        value: 'DAY'\n                                    },\n                                    {\n                                        displayValue: 'Monthly',\n                                        value: 'MONTHLY'\n                                    },\n                                    {\n                                        displayValue: '3 months',\n                                        value: '3 MONTHS'\n                                    },\n                                    {\n                                        displayValue: 'Policy Duration',\n                                        value: 'POLICY DURATION'\n                                    },\n                                ]}\n                            />\n                        </div>\n                        <div className=\"col-md-4\">\n                            <Field\n                                name=\"limit_allowed\"\n                                component={CustomInput}\n                                type=\"number\"\n                                label=\"Limit Allowed\"\n                                validate={[requiredValidator]}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-6\">\n                            <Field\n                                name=\"payment_type\"\n                                component={CustomSelect}\n                                label=\"Payment Type\"\n                                validate={[requiredValidator]}\n                                options={[\n                                    {\n                                        displayValue: 'Capitated',\n                                        value: 'CAPITATED'\n                                    },\n                                    {\n                                        displayValue: 'Not Capitated',\n                                        value: 'NOT CAPITATED'\n                                    },\n                                    {\n                                        displayValue: 'Co Pay',\n                                        value: 'CO PAY'\n                                    },\n                                ]}\n                                onChange={this.setPaymentType}\n                            />\n                        </div> \n                        <div className=\"col-md-6\">\n                            { paymentPercentage }\n                        </div>\n                    </div>\n                </Card>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <div className={styles.buttonContainer}>\n                            <div className={styles.button}>\n                                <CustomButton disabled={invalid || pristine}>Update</CustomButton>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default reduxForm({\n    form: 'PlanServiceForm'\n})(PlanServiceForm);","import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport { reset } from 'redux-form';\nimport {Card} from 'antd';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../ui/Breadcrumb\";\nimport Loader from '../../ui/Loader/Loader.Component';\nimport PlanServiceForm from '../../ui/forms/PlanServiceForm';\nimport { getPlanService, resetGetPlanService, updatePlanService, resetUpdatePlanService } from '../../shared/actions/PlanService.action';\n\nclass PlanServiceEdit extends Component {\n\n    state = {\n        submittingForm: false,\n        planService: null,\n        questions: [],\n    }\n\n    componentDidMount() {\n        this.props.getPlanService(this.props.match.params.slug);\n    }\n\n    handleSubmit = formData => {\n        this.setState({\n            submittingForm: true,\n        }, () => {\n            formData['slug'] = this.props.plan_service.slug;\n            formData['plan_id'] = this.props.plan_service.plan.id;\n            formData['service_id'] = this.props.plan_service.service.id;\n\n            return this.props.updatePlanService(formData);\n        });\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        if ((prevProps.get_plan_service_status !== this.props.get_plan_service_status) && (this.props.get_plan_service_status === 200)) {\n\n            return this.setState({\n                planService: {\n                    limit: parseFloat(this.props.plan_service.limit),\n                    price: parseFloat(this.props.plan_service.price),\n\n                    payment_type: this.props.plan_service.payment_type,\n                    payment_percentage: this.props.plan_service.payment_percentage,\n\n                    limit_type: this.props.plan_service.limit_type,\n                    limit_allowed: this.props.plan_service.limit_allowed,\n\n                    \n                    plan_id: this.props.plan_service.plan.name,\n                    service_id: this.props.plan_service.service.name,\n                }\n            });\n\n        }\n\n\n        if ( (this.props.update_plan_service_status === 200) && (this.props.update_plan_service_status !== prevProps.update_plan_service_status) ) {\n            this.setState({\n                submittingForm: false\n            });\n\n            let alert = await swal({\n                title: \"Good job!\",\n                text: `Benefit and Tariff was updated successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n            if (alert) {\n                this.props.resetUpdatePlanService();\n                this.props.history.push('/dashboard/plan_service_all');\n            }\n        }\n\n    }\n\n    componentWillUnmount() {\n        this.props.resetGetPlanService();\n        this.props.resetUpdatePlanService();\n    }\n\n    render() {\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4>Update Plan Service</h4>\n                                </div>\n                                <div className=\"col-md-6 text-right\">\n                                    <Link className=\"\" to=\"/dashboard/plan_service_all\">\n                                        <button className=\"btn btn-sm btn-success\" type=\"button\">All Plan Services</button>\n                                    </Link>\n                                </div> \n                            </div><hr/>\n                            {this.props.get_plan_service_status === 200 && (\n                                <React.Fragment>\n                                    <div className=\"row\">\n                                        <div className=\"col-md-12\">\n                                            <Card style={{width: '100%'}}>\n                                                <PlanServiceForm\n                                                    btnText=\"Update\"\n                                                    onSubmit={this.handleSubmit}\n                                                    initialValues={this.state.planService}\n                                                    submittingForm={this.state.submittingForm}\n                                                />\n                                            </Card>\n                                        </div>\n                                    </div>\n                                </React.Fragment>\n                            )}\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    plan_service: state.PlanServiceReducer.plan_service,\n    questions: state.PlanServiceReducer.plan_service_questions,\n    get_plan_service_status: state.PlanServiceReducer.get_plan_service_status,\n    update_plan_service_status: state.PlanServiceReducer.update_plan_service_status\n});\n\nconst mapDispatchToProps = dispatch => ({\n    resetGetPlanService: () => dispatch(resetGetPlanService()),\n    getPlanService: payload => dispatch(getPlanService(payload)),\n    resetUpdatePlanService: () => dispatch(resetUpdatePlanService()),\n    updatePlanService: payload => dispatch(updatePlanService(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlanServiceEdit);","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';"],"sourceRoot":""}