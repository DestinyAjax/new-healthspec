{"version":3,"sources":["pages/Encounter/All/EncounterAll.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js","ui/Spinner/Spinner.component.module.css","ui/Spinner/Spinner.component.js","ui/Spinner/index.js","ui/EmptyState/EmptyState.component.module.css","ui/EmptyState/EmptyState.component.js","ui/EmptyState/index.js"],"names":["EncounterAll","state","meta","current_page","generateClaimFor","encounter","console","dir","getNewEncounters","page_number","props","getAllFor","field","value","active","organization_profile","id","display","status","className","this","nextProps","setState","container","pageNumbers","i","Math","ceil","total","per_page","push","renderPageNumbers","map","number","classes","key","onClick","encounter_get_all_for_status","encounters","length","Fragment","message","to","claimable","is_claimed","is_billable","user","first_name","middle_name","last_name","email","Number","price","toLocaleString","last_page","type","Component","connect","ChoseRoleReducer","role","EncounterReducer","dispatch","payload","LayoutContentStyle","styled","div","palette","module","exports","Breadcrumb","links","link","url","styles","item","itemTwo","join","name","defaultProps","withRouter","Spinner","content","EmptyState"],"mappings":"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","file":"static/js/32.6b8cba18.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport Spinner from '../../../ui/Spinner';\nimport EmptyState from '../../../ui/EmptyState';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../../ui/Breadcrumb\";\nimport Loader from '../../../ui/Loader/Loader.Component';\nimport { getAllFor } from '../../../shared/actions/Encounter.action';\n\nclass EncounterAll extends Component {\n\n    state = {\n        meta: {},\n        current_page: 1,\n    }\n\n    componentDidMount() {\n        this.props.getAllFor({\n            page_number: 1,\n            field: 'provider_id',\n            value: this.props.active.organization_profile.id\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            meta: nextProps.meta,\n            current_page: nextProps.meta.current_page\n        });\n    }\n\n    generateClaimFor = encounter => {\n        console.dir(encounter);\n    }\n\n    getNewEncounters = page_number => {\n        this.props.getAllFor({\n            field: 'provider_id',\n            page_number: page_number,\n            value: this.props.active.organization_profile.id,\n        });\n    }\n\n    display = status => {\n        return status == 0 ? <div className=\"inactiveBill\">Not Billable</div> : <div className=\"activeBill\">Billable</div>\n    }\n\n    render() {\n\n        let container = <Spinner />\n\n        const pageNumbers = [];\n        for (let i = 1; i <= Math.ceil(this.state.meta.total / this.state.meta.per_page); i++) {\n            pageNumbers.push(i);\n        }\n\n        const renderPageNumbers = pageNumbers.map(number => {\n            let classes = this.state.current_page === number ? 'active' : '';\n\n            if (number == 1 || number == this.state.meta.total || (number >= this.state.current_page - 2 && number <= this.state.current_page + 2)) {\n                return (\n                    <span key={number} className={classes} onClick={() => this.getNewEncounters(number)}>{number}</span>\n                );\n            }\n        });\n\n\n        if (this.props.encounter_get_all_for_status === 200 && !this.props.encounters.length) {\n            container = (\n                <React.Fragment>\n                    <div>\n                        <EmptyState message=\"No encounter created yet\" />\n                        <div className=\"add_new\">\n                            <Link to=\"/dashboard/encounter_add\">Click here to add new encounter</Link>\n                        </div>\n                    </div>\n                </React.Fragment>\n            );\n        }\n        if (this.props.encounter_get_all_for_status === 200 && this.props.encounters.length) {\n            let encounters = this.props.encounters.map(encounter => {\n\n                let claimable = (\n                    <td></td>\n                );\n\n                if ( (!encounter.is_claimed) && (encounter.is_billable)) {\n                    claimable = (\n                        <td onClick={() => this.generateClaimFor(encounter)}><span className=\"view\">Claim</span></td>\n                    )\n                }\n\n                return (\n                    <tr key={encounter.id}>\n                        <td>{encounter.id}</td>\n                        <td>\n                            <div className=\"name\">\n                                <div className=\"tTitle\">\n                                    <div className=\"head\">\n                                        {encounter.user.first_name} {encounter.user.middle_name} {encounter.user.last_name}\n                                    </div>\n                                    <div className=\"sub\">{encounter.user.email}</div>\n                                </div>\n                            </div>\n                        </td>\n                        <td>{this.display(encounter.is_billable)}</td>\n                        <td>&#8358; {Number(encounter.price).toLocaleString()}</td>\n                        { claimable }\n                    </tr>\n                )\n            });\n\n            container = (\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <div className=\"card\">\n                            <div className=\"card-body table-responsive\">\n                                <table className={\"table table-striped\"}>\n                                    <thead>\n                                        <tr>\n                                            <th>S/N</th>\n                                            <th>User</th>\n                                            <th>Billable</th>\n                                            <th>Price</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        { encounters }\n                                    </tbody>\n                                </table>\n                                <div className=\"pagination\">\n                                    <span onClick={() => this.getNewEncounters(1)}>&laquo;</span>\n                                    {renderPageNumbers}\n                                    <span onClick={() => this.getNewEncounters(this.props.meta.last_page)}>&raquo;</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4>Encounters</h4>\n                                </div>\n                                <div className=\"col-md-6 text-right\">\n                                    <Link className=\"\" to=\"/dashboard/encounter_all\">\n                                        <button className=\"btn btn-sm btn-success\" type=\"button\">All Encounter</button>\n                                    </Link>\n                                </div> \n                            </div><hr/>\n                            {container}\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    active: state.ChoseRoleReducer.role,\n    meta: state.EncounterReducer.meta,\n    encounters: state.EncounterReducer.encounters,\n    encounter_get_all_for_status: state.EncounterReducer.encounter_get_all_for_status,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getAllFor: payload => dispatch(getAllFor(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EncounterAll);","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Spinner.component_container__W-GWN\",\"content\":\"Spinner.component_content__11MBV\",\"message\":\"Spinner.component_message__3kFxw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Spinner.component.module.css';\n\nconst Spinner = ({message}) => (\n\t<div className={styles.container}>\n\t\t<div className={styles.content}>\n\t\t\t<i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\n\t\t\t<div className={styles.message}>\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\n\nSpinner.defaultProps = {\n\tmessage: 'Loading'\n};\n\nexport default Spinner;","export { default } from './Spinner.component.js';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EmptyState.component_container__24MCK\",\"content\":\"EmptyState.component_content__2S8fd\",\"message\":\"EmptyState.component_message___WVjs\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './EmptyState.component.module.css';\n\nconst EmptyState = ({message}) => (\n\t<div className={styles.container}>\n\t\t<div className={styles.content}>\n\t\t\t<div className={styles.message}>\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\n\nEmptyState.defaultProps = {\n\tmessage: 'Data is empty'\n};\n\nexport default EmptyState;","export { default } from './EmptyState.component.js';"],"sourceRoot":""}