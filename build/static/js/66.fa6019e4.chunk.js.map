{"version":3,"sources":["ui/forms/ChangePasswordForm/ChangePasswordForm.component.module.css","ui/forms/ChangePasswordForm/ChangePasswordForm.component.js","pages/ChangePassword/ChangePassword.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js"],"names":["module","exports","reduxForm","form","handleSubmit","pristine","invalid","submittingForm","onSubmit","className","Field","name","component","CustomInput","label","type","validate","requiredValidator","matchesPassword","styles","buttonContainer","CustomButton","disabled","ChangePassword","state","requestingForm","showNotification","props","a","async","status","swal","title","text","icon","closeOnClickOutside","alert","msg","resetChangePassword","history","push","formData","isFirstLogin","getStorage","auth","id","active","user_id","setState","storeChangePassword","nextProps","this","Dashboard","style","width","Component","connect","AuthReducer","roles","ReferReducer","refer_msg","ChangePasswordReducer","dispatch","payload","LayoutContentStyle","styled","div","palette"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,cAAgB,oDAAoD,YAAc,kDAAkD,UAAY,gDAAgD,gBAAkB,sDAAsD,OAAS,+C,2QCuCpRC,cAAU,CACrBC,KAAM,sBADKD,EAjCY,SAAC,GAAyD,IAAvDE,EAAsD,EAAtDA,aAAcC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eAE3D,OAEI,0BAAMC,SAAUJ,GACZ,yBAAMK,UAAW,aACb,kBAACC,EAAA,EAAD,CACIC,KAAK,WACLC,UAAWC,IACXC,MAAM,WACNC,KAAK,WACLC,SAAU,CAACC,OAGf,kBAACP,EAAA,EAAD,CACIC,KAAK,wBACLC,UAAWC,IACXC,MAAM,mBACNC,KAAK,WACLC,SAAU,CAACE,QAInB,yBAAKT,UAAWU,IAAOC,iBAEf,kBAACC,EAAA,EAAD,CAAcC,SAAUhB,GAAWD,EAAUE,eAAgBA,GAA7D,wB,SCpBdgB,E,2MAEFC,MAAQ,CACJC,gBAAgB,G,EAMpBC,iBAAmB,SAAMC,GAAN,eAAAC,EAAAC,OAAA,oDAEXF,EAAMG,QAA2B,MAAjBH,EAAMG,OAFX,kCAAAF,EAAA,MAGGG,IAAK,CACfC,MAAO,YACPC,KAAK,iCACLC,KAAM,UACNC,qBAAqB,KAPd,OAGXC,EAHW,kCASNT,EAAMG,QAA2B,MAAjBH,EAAMG,OAThB,mCAAAF,EAAA,MAUGG,IAAK,CACfC,MAAO,oBACPC,KAAK,GAAD,OAAKN,EAAMU,KACfH,KAAM,UACNC,qBAAqB,KAdd,OAUXC,EAVW,mBAiBXA,EAjBW,wBAkBX,EAAKT,MAAMW,sBAlBA,kBAmBJ,EAAKX,MAAMY,QAAQC,KAAK,gBAnBpB,uC,EA2BnBpC,aAAe,SAAAqC,GACX,IAAMC,EAAeC,YAAW,kBAI/B,GAFoB,IAAjBD,IACAD,EAAQ,QAAc,EAAKd,MAAMiB,KAAK,GAAGC,IACxB,IAAjBH,IAAuB,EAAKf,MAAMmB,OAClC,OAAO,EAAKnB,MAAMY,QAAQC,KAAK,eAE/BC,EAAQ,QAAc,EAAKd,MAAMmB,OAAO,GAAGC,QAG/C,EAAKC,SAAS,CACVvB,gBAAgB,IACjB,WACC,EAAKE,MAAMsB,oBAAoBR,O,sIAlBbS,GACtBC,KAAKzB,iBAAiBwB,K,+BAuBtB,OACI,kBAACE,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,yBAAK3C,UAAU,OACX,yBAAKA,UAAU,aACX,uBAAMuB,MAAM,kBAAkBqB,MAAO,CAACC,MAAO,SACzC,kBAAC,EAAD,CACI9C,SAAU2C,KAAK/C,aACfG,eAAgB4C,KAAK3B,MAAMC,4B,GAlE1C8B,aA0FdC,uBAZS,SAAAhC,GAAK,MAAK,CAC9BsB,OAAQtB,EAAMiC,YAAYC,MAC1Bd,KAAMpB,EAAMiC,YAAYC,MACxBrB,IAAKb,EAAMmC,aAAaC,UACxB9B,OAAQN,EAAMqC,sBAAsB/B,WAGb,SAAAgC,GAAQ,MAAK,CACpCxB,oBAAqB,kBAAMwB,EAASxB,gBACpCW,oBAAqB,SAAAc,GAAO,OAAID,EAASb,YAAoBc,QAGlDP,CAA6CjC,I,+OCnG5D,IAQeyC,EARYC,IAAOC,IAAV,IAIFC,kBAAQ,SAAU,ICLzBH","file":"static/js/66.fa6019e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"ChangePasswordForm.component_formContainer__27gaT\",\"inlineGroup\":\"ChangePasswordForm.component_inlineGroup__1TXUq\",\"formGroup\":\"ChangePasswordForm.component_formGroup__B3XSG\",\"buttonContainer\":\"ChangePasswordForm.component_buttonContainer__24tLY\",\"button\":\"ChangePasswordForm.component_button__1ynZq\"};","import React from 'react';\nimport CustomInput from '../../CustomInput';\nimport { Field, reduxForm } from 'redux-form';\nimport CustomButton from '../../CustomButton';\nimport styles from './ChangePasswordForm.component.module.css';\nimport { requiredValidator, matchesPassword } from '../../../shared/utils/validation';\n\nconst ChangePasswordForm = ({ handleSubmit, pristine, invalid, submittingForm }) => {\n     \n    return (\n        \n        <form onSubmit={handleSubmit}>\n            <div  className={'card-body'}>\n                <Field\n                    name=\"password\"\n                    component={CustomInput}\n                    label=\"Password\"\n                    type=\"password\"\n                    validate={[requiredValidator]}\n                />\n\n                <Field\n                    name=\"password_confirmation\"\n                    component={CustomInput}\n                    label=\"Confirm Password\"\n                    type=\"password\"\n                    validate={[matchesPassword]}\n                />\n                \n            </div>\n            <div className={styles.buttonContainer}>\n                {/* <div className={styles.button}> */}\n                    <CustomButton disabled={invalid || pristine} submittingForm={submittingForm}>Change Password</CustomButton>\n                {/* </div> */}\n            </div>\n        </form>\n    )\n\n}\n\nexport default reduxForm({\n    form: 'ChangePasswordForm'\n})(ChangePasswordForm);","import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport {Card} from 'antd';\nimport { connect } from 'react-redux';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../containers/Dashboard/Dashboard';\nimport Loader from '../../ui/Loader/Loader.Component';\nimport { getStorage } from '../../shared/utils/storage';\nimport ChangePasswordForm from '../../ui/forms/ChangePasswordForm';\nimport { storeChangePassword, resetChangePassword } from '../../shared/actions/ChangePassword.action';\n\nclass ChangePassword extends Component {\n\n    state = {\n        requestingForm: false,\n    }\n\n    componentDidMount() {\n    }\n\n    showNotification = async props => {\n        let alert;\n        if (props.status && props.status === 200) {\n            alert = await swal({\n                title: \"Good job!\",\n                text: `password changed successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n        }else if(props.status && props.status !== 200){\n            alert = await swal({\n                title: \"An Error Occured!\",\n                text: `${props.msg}`,\n                icon: \"warning\",\n                closeOnClickOutside: false\n            });\n        }\n        if (alert) {\n            this.props.resetChangePassword();\n            return this.props.history.push('/chose_role');\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.showNotification(nextProps);\n    }\n\n    handleSubmit = formData => {\n        const isFirstLogin = getStorage(\"is_first_login\");\n\n        if (isFirstLogin === 1) {\n            formData[\"user_id\"] = this.props.auth[0].id\n        }if(isFirstLogin === 0 && !this.props.active){\n            return this.props.history.push('/chose_role');\n        }else{\n            formData[\"user_id\"] = this.props.active[0].user_id\n        }\n        \n        this.setState({\n            requestingForm: true\n        }, () => {\n            this.props.storeChangePassword(formData);\n        });\n    }\n\n    render() {\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent> \n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <Card title=\"Chaage Password\" style={{width: '100%'}}>\n                                        <ChangePasswordForm \n                                            onSubmit={this.handleSubmit} \n                                            submittingForm={this.state.requestingForm}/>\n                                    </Card>\n                                </div>\n                            </div>\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    active: state.AuthReducer.roles,\n    auth: state.AuthReducer.roles,\n    msg: state.ReferReducer.refer_msg,\n    status: state.ChangePasswordReducer.status\n});\n\nconst mapDispatchToProps = dispatch => ({\n    resetChangePassword: () => dispatch(resetChangePassword()),\n    storeChangePassword: payload => dispatch(storeChangePassword(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePassword);","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n"],"sourceRoot":""}