{"version":3,"sources":["pages/Role/Edit/RoleEdit.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js","ui/forms/RoleForm/RoleForm.component.module.css","ui/forms/RoleForm/RoleForm.component.js","ui/forms/RoleForm/index.js"],"names":["RoleEdit","state","submittingForm","handleSubmit","formData","setState","props","match","params","slug","updateRole","showNotification","a","async","update_role_status","swal","title","text","role","name","icon","closeOnClickOutside","resetUpdateRole","history","push","nextProps","this","getRole","resetStoreRole","className","style","width","onSubmit","initialValues","permissions","role_permissions","permission_roles","btnText","Component","connect","RoleReducer","status","get_role_status","dispatch","payload","LayoutContentStyle","styled","div","palette","module","exports","Breadcrumb","links","map","link","to","url","styles","item","itemTwo","join","key","defaultProps","withRouter","active","ChoseRoleReducer","RoleForm","setPermissions","role_permission","permission","id","includes","permissionHandler","index","newPermissions","filter","is_picked","submit","pristine","invalid","checked","aria-hidden","onClick","description","Field","component","CustomInput","type","label","validate","requiredValidator","questionHeader","buttonContainer","button","CustomButton","disabled","React","reduxForm","form"],"mappings":"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","file":"static/js/50.4f2f8a53.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport { connect } from 'react-redux';\nimport {Card} from 'antd';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../../ui/Breadcrumb\";\nimport Loader from '../../../ui/Loader/Loader.Component';\nimport RoleForm from '../../../ui/forms/RoleForm';\nimport { updateRole, resetStoreRole, getRole, resetUpdateRole } from '../../../shared/actions/Role.action';\n\nclass RoleEdit extends Component {\n\n    state = {\n        submittingForm: false,\n    }\n\n    handleSubmit = formData => {\n        this.setState({\n            submittingForm: true\n        });\n        formData['slug'] = this.props.match.params.slug;\n\n        this.props.updateRole(formData);\n    }\n\n    showNotification = async props => {\n        if (props.update_role_status === 200) {\n            let alert = await swal({\n                title: \"Good job!\",\n                text: `${props.role.name} was updated successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n            if (alert) {\n                this.props.resetUpdateRole();\n                this.props.history.push('/dashboard/role_all');\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.showNotification(nextProps);\n    }\n\n    componentDidMount() {\n        this.props.getRole(this.props.match.params.slug);\n    }\n\n    componentWillUnmount() {\n        this.props.resetStoreRole();\n    }\n\n    render() {\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4>Role Update</h4>\n                                </div>\n                            </div><hr/>\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                   <Card style={{width: '100%'}}>\n                                        <RoleForm onSubmit={this.handleSubmit}\n                                            initialValues={this.props.role}\n                                            permissions={this.props.permissions}\n                                            role_permissions={this.props.role.permission_roles}\n                                            submittingForm={this.state.submittingForm}\n                                            btnText=\"Update\"\n                                        />\n                                   </Card>\n                                </div>\n                            </div>\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    role: state.RoleReducer.role,\n    status: state.RoleReducer.get_role_status,\n    permissions: state.RoleReducer.permissions,\n    update_role_status: state.RoleReducer.update_role_status,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getRole: payload => dispatch(getRole(payload)),\n    resetStoreRole: () => dispatch(resetStoreRole()),\n    resetUpdateRole: () => dispatch(resetUpdateRole()),\n    updateRole: payload => dispatch(updateRole(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RoleEdit);","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"RoleForm.component_formContainer__1Ligp\",\"permission\":\"RoleForm.component_permission__3nmHY\",\"questionHeader\":\"RoleForm.component_questionHeader__12_ym\",\"inlineGroup\":\"RoleForm.component_inlineGroup__1Pwgu\",\"formGroup\":\"RoleForm.component_formGroup__2T-2t\",\"buttonContainer\":\"RoleForm.component_buttonContainer__1kd2W\",\"button\":\"RoleForm.component_button__sU5AB\"};","import React from 'react';\nimport {Card} from 'antd';\nimport CustomInput from '../../CustomInput';\nimport CustomButton from '../../CustomButton';\nimport { Field, reduxForm } from 'redux-form';\nimport styles from './RoleForm.component.module.css';\nimport { requiredValidator } from '../../../shared/utils/validation';\n\nclass RoleForm extends React.Component {\n\n    state = {\n        permissions: []\n    }\n\n    componentDidMount() {\n        this.setPermissions();\n    }\n\n    setPermissions = () => {\n        const role_permissions = this.props.role_permissions.map(role_permission => role_permission.permission.id);\n\n        const permissions = this.props.permissions.map(permission => {\n            if (role_permissions.includes(permission.id)) {\n                permission['is_picked'] = true;\n            } else {\n                permission['is_picked'] = false;\n            }\n            return permission;\n        });\n\n        this.setState({\n            permissions: permissions\n        });\n    }\n\n    permissionHandler = (permission, index) => {\n        permission['is_picked'] = !permission['is_picked'];\n\n        let newPermissions = [...this.state.permissions];\n        newPermissions[index] = permission;\n\n        this.setState({\n            permissions: newPermissions\n        });\n    }\n\n    handleSubmit = formData => {\n        formData['permissions'] = this.state.permissions.filter(permission => permission.is_picked).map(permission => permission.id);\n\n        this.props.submit(formData);\n    }\n\n\n    render () {\n\n        let { handleSubmit, pristine, invalid, btnText } = this.props;\n\n        let permissions = this.state.permissions.map((permission, index) => {\n\n            let checked = <i className=\"fa fa-circle-o\" aria-hidden=\"true\"></i>\n            if (permission.is_picked) {\n                checked = <i className=\"fa fa-circle\" aria-hidden=\"true\"></i>\n            }\n\n            return (\n                <tr key={permission.id} onClick={() => this.permissionHandler(permission, index)}>\n                    <td>{checked}</td>\n                    <td>{permission.name}</td>\n                    <td>{permission.url}</td>\n                    <td>{permission.description}</td>\n                </tr>\n            )\n        });\n\n\n        return (\n            <form onSubmit={handleSubmit(this.handleSubmit)}>\n                <Card style={{width:'100%'}}>\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <Field\n                                name=\"name\"\n                                component={CustomInput}\n                                type=\"text\"\n                                label=\"Name\"\n                                validate={[requiredValidator]}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <div className={styles.questionHeader}>Permissions</div>\n                            <div>\n                                <table>\n                                    <thead>\n                                        <tr>\n                                            <th>Status</th>\n                                            <th>Name</th>\n                                            <th>Url</th>\n                                            <th>Description</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        { permissions }\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </Card>\n                <div className={styles.buttonContainer}>\n                    <div className={styles.button}>\n                        <CustomButton disabled={invalid || pristine}>{btnText}</CustomButton>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default reduxForm({\n    form: 'RoleForm'\n})(RoleForm);","export { default } from './RoleForm.component';"],"sourceRoot":""}