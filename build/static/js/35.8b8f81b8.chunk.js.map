{"version":3,"sources":["ui/Invoice/Invoice.component.module.css","ui/forms/TransactionSearchForm/TransactionSearchForm.component.module.css","ui/Invoice/Invoice.component.js","ui/forms/TransactionSearchForm/TransactionSearchForm.component.js","pages/Transaction/Transaction.js","../node_modules/redux-form/es/index.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js"],"names":["module","exports","Invoice","makeDecisionWith","decision","a","async","decisionMessage","swal","title","type","buttons","dangerMode","props","updateTransaction","status","banker_role_user_id","role","id","bank_id","organization_profile_id","reference_number","transaction","form","this","transaction_id","get","console","dir","container","get_single_transaction_status","verifier","confirmHeader","confirmBody","model","className","styles","actions","action","onClick","reject","CustomButton","Fragment","item","itemTitle","itemDescription","first_name","last_name","middle_name","moment","confirmed_date","date","format","ref_number_title","ref_number","body","itemsImage","items","owner","enrollee_id","provider_name","provider_code","Number","amount","toLocaleString","image","src","picture","created_at","policy_name","policy_duration","React","Component","connect","state","ChoseRoleReducer","auth_user_id","AuthReducer","TransactionReducer","online_payment_status","update_transaction_status","dispatch","payload","startConfirmOnlinePayment","TransactionSearchForm","onSubmit","handleSubmit","Field","name","component","CustomInput","label","validate","requiredValidator","buttonContainer","button","cancel","disabled","invalid","pristine","submittingForm","reduxForm","Transaction","formData","setState","getAllForUser","field","value","cancelHandler","transactionGetUserReset","reset","activeTransactionHandler","prevProps","prevState","text","icon","closeOnClickOutside","invoiceContainer","transactionContainer","transactions","map","key","style","width","colSpan","Dashboard","Breadcrumb","links","url","get_transactions_status","arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","autofill","blur","change","clearAsyncError","clearFields","clearSubmit","clearSubmitErrors","destroy","focus","initialize","registerField","resetSection","setSubmitFailed","setSubmitSucceeded","startAsyncValidation","startSubmit","stopAsyncValidation","stopSubmit","submit","touch","unregisterField","untouch","updateSyncWarnings","updateSyncErrors","LayoutContentStyle","styled","div","palette","link","to","itemTwo","join","defaultProps","withRouter","active"],"mappings":"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","file":"static/js/35.8b8f81b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Invoice.component_container__2Tqhd\",\"header\":\"Invoice.component_header__OM3NE\",\"title\":\"Invoice.component_title__2Pt6r\",\"body\":\"Invoice.component_body__2wY_9\",\"items\":\"Invoice.component_items__1QoX6\",\"image\":\"Invoice.component_image__1DezS\",\"item\":\"Invoice.component_item__10q90\",\"itemTitle\":\"Invoice.component_itemTitle__N-HZA\",\"itemDescription\":\"Invoice.component_itemDescription__ORSSP\",\"table\":\"Invoice.component_table__1lhBE\",\"actions\":\"Invoice.component_actions__3RI44\",\"action\":\"Invoice.component_action__3G3dh\",\"reject\":\"Invoice.component_reject__BgVm-\",\"itemsImage\":\"Invoice.component_itemsImage__1LVYc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"TransactionSearchForm.component_formContainer__3AgVe\",\"button\":\"TransactionSearchForm.component_button__WGesk\",\"inlineGroup\":\"TransactionSearchForm.component_inlineGroup__3GKag\",\"formGroup\":\"TransactionSearchForm.component_formGroup__F18n6\",\"buttonContainer\":\"TransactionSearchForm.component_buttonContainer__3lC2U\"};","import React from 'react';\nimport moment from 'moment';\nimport swal from 'sweetalert';\nimport { connect } from 'react-redux';\nimport CustomButton from '../CustomButton';\nimport styles from './Invoice.component.module.css';\n\nimport { get, updateTransaction, startConfirmOnlinePayment } from '../../shared/actions/Transaction.action';\n\nclass Invoice extends React.Component {\n\n\n    makeDecisionWith = async decision => {\n        let decisionMessage = decision ? 'Accept' : 'Reject';\n\n        let alert = await swal({\n            title: `Are you sure you want to ${decisionMessage} this invoice`,\n            type: 'confirm',\n            buttons: [\n                'No',\n                'Yes, I am sure!'\n            ],\n            dangerMode: true,\n        });\n\n        if (alert) {\n            this.props.updateTransaction({\n                status: decision,\n                banker_role_user_id: this.props.role.id,\n                bank_id: this.props.role.organization_profile_id,\n                reference_number: this.props.transaction.reference_number\n            });\n        }\n    }\n\n    componentDidMount() {\n        let form = {};\n\n        form['field'] = 'id';\n        form['value'] = this.props.transaction_id;\n\n        this.props.get(form);\n\n        console.dir(this.props.role);\n    }\n\n    render () {\n\n        let container;\n\n\n        if (this.props.get_single_transaction_status === 200) {\n\n            let transaction = this.props.transaction;\n            let model = this.props.transaction.model;\n\n            let decision, verifier, confirmHeader, confirmBody;\n\n\n            if (transaction.status === 0) {\n                decision = (\n                    <div className={styles.actions}>\n                        <div className={styles.action} onClick={() => this.makeDecisionWith(false)}>\n                            <a className={styles.reject}>Reject</a>\n                        </div>\n\n                        <div className={styles.action} onClick={() => this.makeDecisionWith(true)}>\n                            <CustomButton>Mark Paid</CustomButton>\n                        </div>\n                    </div>\n                )\n            }\n\n            if (transaction.status === 1) {\n                decision = (\n                    <div className={styles.actions}>\n                        <div className={styles.action}>\n                            <CustomButton>VERIFIED & ACTIVE</CustomButton>\n                        </div>\n                    </div>\n                )\n\n                verifier = (\n                    <React.Fragment>\n                        <div className={styles.item}>\n                            <div className={styles.itemTitle}>Verifier</div>\n                            <div className={styles.itemDescription}>\n                                <div>{transaction.verifier.first_name} {transaction.verifier.last_name} {transaction.verifier.middle_name}</div>\n                            </div>\n                        </div>\n                    </React.Fragment>\n                )\n\n                confirmHeader = (\n                    <React.Fragment>\n                        <th>Confirmed Date</th>\n                        {/* <th>Expires</th> */}\n                    </React.Fragment>\n                )\n\n                confirmBody = (\n                    <React.Fragment>\n                        <td>{moment(transaction.confirmed_date.date).format('Do MMMM YYYY')}</td>\n                        {/* <td>{moment(model.expires_at.date).format('Do MMMM YYYY')}</td> */}\n                    </React.Fragment>\n                )\n            }\n            if (transaction.status === 2) {\n                decision = (\n                    <div className={styles.actions}>\n                        <div className={styles.action}>\n                            <CustomButton>REJECTED</CustomButton>\n                        </div>\n                    </div>\n                )\n            }\n\n\n\n            container = (\n                <div className={styles.container}>\n\n                    <div  className={'card-header'}>\n                        <div className={styles.ref_number_title}>\n                            <div className={styles.ref_number}>1022020200202</div>\n                            <div className={'h3'} >INVOICE</div>\n                        </div>\n                        <div className={styles.date}>\n                            Osun Health Insurance Scheme\n                        </div>\n                    </div>\n\n\n                    <div className={styles.body}>\n\n\n                        <div className={styles.itemsImage}>\n                            <div className={styles.items}>\n                                <div className={styles.item}>\n                                    <div className={styles.itemTitle}>Enrollee</div>\n                                    <div className={styles.itemDescription}>\n                                        <div>{transaction.owner.first_name} {transaction.owner.last_name} {transaction.owner.middle_name}</div>\n                                        <div>{transaction.owner.enrollee_id}</div>\n                                    </div>\n                                </div>\n                                <div className={styles.item}>\n                                    <div className={styles.itemTitle}>Provider</div>\n                                    <div className={styles.itemDescription}>\n                                        <div>{transaction.model.provider_name}</div>\n                                        <div>{transaction.model.provider_code}</div>\n                                        {/* <div>{model.organization_profile.warden}</div> */}\n                                    </div>\n                                </div>\n                                <div className={styles.item}>\n                                    <div className={styles.itemTitle}>Amount</div>\n                                    <div className={styles.itemDescription}>\n                                        <div>NGN {Number(transaction.amount).toLocaleString()}</div>\n                                    </div>\n                                </div>\n\n                                {verifier}\n                            </div>\n\n                            <div className={styles.image}>\n                                <img src={transaction.model.picture} />\n                            </div>\n                        </div>\n                        <div className={\"table-responsive-sm\"}>\n                        <table className={\"table table-striped\"}>\n                            <thead>\n                                <tr>\n                                    <th>Type</th>\n                                    <th>Issued Date</th>\n                                    <th>Policy Name</th>\n                                    <th>Duration</th>\n                                    <th>Reference Number</th>\n                                    {confirmHeader}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>{transaction.type}</td>\n                                    <td>{moment(transaction.created_at.date).format('Do MMMM YYYY')}</td>\n                                    <td>{transaction.model.policy_name}</td>\n                                    <td>{transaction.model.policy_duration} Months</td>\n                                    <td>{transaction.reference_number}</td>\n                                    {confirmBody}\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    </div>\n\n\n                    {decision}\n                </div>\n            )\n        }\n\n\n        return (\n            <React.Fragment>\n                { container }\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        role: state.ChoseRoleReducer.role,\n        auth_user_id: state.AuthReducer.id,\n        transaction: state.TransactionReducer.transaction,\n\n        get_single_transaction_status: state.TransactionReducer.get_single_transaction_status,\n\n        online_payment_status: state.TransactionReducer.online_payment_status,\n        update_transaction_status: state.TransactionReducer.update_transaction_status,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        get: payload => dispatch(get(payload)),\n        updateTransaction: payload => dispatch(updateTransaction(payload)),\n        startConfirmOnlinePayment: payload => dispatch(startConfirmOnlinePayment(payload))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Invoice);","import React from 'react';\nimport CustomInput from '../../CustomInput';\nimport CustomButton from '../../CustomButton';\nimport { Field, reduxForm } from 'redux-form';\nimport styles from './TransactionSearchForm.component.module.css';\nimport { requiredValidator } from '../../../shared/utils/validation';\n\nclass TransactionSearchForm extends React.Component {\n\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit}>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Field\n                            name=\"enrollee_id\"\n                            component={CustomInput}\n                            label=\"Search By Enrollee ID\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n                </div><hr/>\n\n                <div className={styles.buttonContainer}>\n                    <div className={styles.button} onClick={this.props.cancel}>Cancel</div>\n                    <div className={styles.button}>\n                        <CustomButton disabled={this.props.invalid || this.props.pristine} submittingForm={this.props.submittingForm}>Search</CustomButton>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default reduxForm({\n    form: 'TransactionSearchForm'\n})(TransactionSearchForm);","import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { reset } from 'redux-form';\nimport {Card} from 'antd';\nimport Invoice from '../../ui/Invoice';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../ui/Breadcrumb\";\nimport Loader from '../../ui/Loader/Loader.Component';\nimport { getAllForUser, transactionGetUserReset } from '../../shared/actions/Transaction.action';\nimport TransactionSearchForm from '../../ui/forms/TransactionSearchForm';\n\nclass Transaction extends Component {\n\n    state = {\n        transaction: null,\n        submittingForm: false\n    }\n\n    handleSubmit = formData => {\n        this.setState({\n            submittingForm: true\n        }, () => {\n            this.props.getAllForUser({\n                field: 'enrollee_id',\n                value: formData.enrollee_id\n            });\n        });\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n\n\n        if (this.props.status !== prevProps.status) {\n\n            if (this.props.status === 200) {\n                let alert = await swal({\n                    title: \"Good job!\",\n                    text: `User Found, Pick a transaction to update status!`,\n                    icon: \"success\",\n                    closeOnClickOutside: false\n                });\n\n                if (alert) {\n                    this.setState({\n                        submittingForm: false\n                    });\n                }\n            }\n\n            if (this.props.status == 404) {\n                let alert = await swal({\n                    title: \"Opps\",\n                    text: `No User Found!`,\n                    icon: \"error\",\n                    closeOnClickOutside: false\n                });\n\n                if (alert) {\n                    this.props.transactionGetUserReset();\n                    this.setState({\n                        submittingForm: false\n                    });\n                }\n            }\n        }\n    }\n\n    cancelHandler = () => {\n        this.props.transactionGetUserReset();\n        this.props.reset('TransactionSearchForm');\n    }\n\n    componentWillUnmount() {\n        this.props.transactionGetUserReset();\n    }\n\n    activeTransactionHandler = transaction => {\n        return this.setState({\n            transaction: transaction,\n        });\n    }\n\n    render() {\n\n        let invoiceContainer, transactionContainer;\n\n        if (this.props.status === 200) {\n\n            if (this.state.transaction !== null) {\n                invoiceContainer = (\n                    <div>\n                        <Invoice transaction_id={this.state.transaction.id} />\n                    </div>\n                )\n            }\n\n            let transactions = this.props.transactions.map(transaction => (\n                <tr key={transaction.id}>\n                    <td>{moment(transaction.created_at.date).format('Do MMMM YYYY')}</td>\n                    <td>{transaction.type}</td>\n                    <td>{(transaction.status == 1) ? 'PAID' : 'UNPAID'}</td>\n                    <td>{transaction.reference_number}</td>\n                    <td>{transaction.amount.toLocaleString()}</td>\n                    <td onClick={() => this.activeTransactionHandler(transaction)}><i className=\"fa fa-eye\"></i></td>\n                </tr>\n            ));\n\n            transactionContainer = (\n                <React.Fragment>\n                    <Card style={{width: '100%'}}>\n                        <table className='table table-strip table-hover'>\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Type</th>\n                                    <th>Status</th>\n                                    <th>Reference number</th>\n                                    <th>Amount</th>\n                                    <th>Access</th>\n                                </tr>\n                            </thead>\n                            <tbody>{transactions}</tbody>\n                        </table>\n                    </Card>\n                    {invoiceContainer}\n                </React.Fragment>\n            )\n        }\n\n\n        if (this.props.status === 404) {\n            transactionContainer = (\n                <Card style={{width: '100%'}}>\n                    <div className=\"searchResult\">\n                        <table className=\"table table-striped\">\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Type</th>\n                                    <th>Status</th>\n                                    <th>Reference number</th>\n                                    <th>Amount</th>\n                                    <th>Access</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td colSpan=\"6\">\n                                        <div className=\"notFoundTransaction\">\n                                            <div>User Transaction not found</div>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </Card>\n            )\n        }\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <Breadcrumb links={[\n                                        {\n                                            url: '/dashboard/transaction',\n                                            name: 'Transaction'\n                                        },\n                                    ]} />\n                                </div>\n                            </div><hr/>\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <Card style={{width: '100%'}}>\n                                        <TransactionSearchForm\n                                            onSubmit={this.handleSubmit}\n                                            cancel={this.cancelHandler}\n                                            submittingForm={this.state.submittingForm}\n                                        />\n                                    </Card><br/>\n                                    {transactionContainer}\n                                </div>\n                            </div>\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    transactions: state.TransactionReducer.transactions,\n    status: state.TransactionReducer.get_transactions_status,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    reset: payload => dispatch( reset(payload) ),\n    getAllForUser: payload => dispatch(getAllForUser(payload)),\n    transactionGetUserReset: () => dispatch(transactionGetUserReset())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transaction);","import actions from './actions';\nimport * as _actionTypes from './actionTypes';\nexport { ReduxFormContext } from './ReduxFormContext';\nexport { default as defaultShouldAsyncValidate } from './defaultShouldAsyncValidate';\nexport { default as defaultShouldValidate } from './defaultShouldValidate';\nexport { default as defaultShouldError } from './defaultShouldError';\nexport { default as defaultShouldWarn } from './defaultShouldWarn';\nexport { default as Form } from './Form';\nexport { default as FormName } from './FormName';\nexport { default as FormSection } from './FormSection';\nexport { default as SubmissionError } from './SubmissionError'; // alias for propTypes\n\nexport { default as propTypes, fieldInputPropTypes, fieldMetaPropTypes, fieldPropTypes, fieldArrayFieldsPropTypes, fieldArrayMetaPropTypes, fieldArrayPropTypes, formPropTypes } from './propTypes';\nexport { default as Field } from './Field';\nexport { default as Fields } from './Fields';\nexport { default as FieldArray } from './FieldArray';\nexport { default as formValueSelector } from './formValueSelector';\nexport { default as formValues } from './formValues';\nexport { default as getFormError } from './getFormError';\nexport { default as getFormNames } from './getFormNames';\nexport { default as getFormValues } from './getFormValues';\nexport { default as getFormInitialValues } from './getFormInitialValues';\nexport { default as getFormSyncErrors } from './getFormSyncErrors';\nexport { default as getFormMeta } from './getFormMeta';\nexport { default as getFormAsyncErrors } from './getFormAsyncErrors';\nexport { default as getFormSyncWarnings } from './getFormSyncWarnings';\nexport { default as getFormSubmitErrors } from './getFormSubmitErrors';\nexport { default as isAsyncValidating } from './isAsyncValidating';\nexport { default as isDirty } from './isDirty';\nexport { default as isInvalid } from './isInvalid';\nexport { default as isPristine } from './isPristine';\nexport { default as isValid } from './isValid';\nexport { default as isSubmitting } from './isSubmitting';\nexport { default as hasSubmitSucceeded } from './hasSubmitSucceeded';\nexport { default as hasSubmitFailed } from './hasSubmitFailed';\nexport { default as reduxForm } from './reduxForm';\nexport { default as reducer } from './reducer';\nexport { default as values } from './values';\nexport var actionTypes = _actionTypes;\nexport var arrayInsert = actions.arrayInsert;\nexport var arrayMove = actions.arrayMove;\nexport var arrayPop = actions.arrayPop;\nexport var arrayPush = actions.arrayPush;\nexport var arrayRemove = actions.arrayRemove;\nexport var arrayRemoveAll = actions.arrayRemoveAll;\nexport var arrayShift = actions.arrayShift;\nexport var arraySplice = actions.arraySplice;\nexport var arraySwap = actions.arraySwap;\nexport var arrayUnshift = actions.arrayUnshift;\nexport var autofill = actions.autofill;\nexport var blur = actions.blur;\nexport var change = actions.change;\nexport var clearAsyncError = actions.clearAsyncError;\nexport var clearFields = actions.clearFields;\nexport var clearSubmit = actions.clearSubmit;\nexport var clearSubmitErrors = actions.clearSubmitErrors;\nexport var destroy = actions.destroy;\nexport var focus = actions.focus;\nexport var initialize = actions.initialize;\nexport var registerField = actions.registerField;\nexport var reset = actions.reset;\nexport var resetSection = actions.resetSection;\nexport var setSubmitFailed = actions.setSubmitFailed;\nexport var setSubmitSucceeded = actions.setSubmitSucceeded;\nexport var startAsyncValidation = actions.startAsyncValidation;\nexport var startSubmit = actions.startSubmit;\nexport var stopAsyncValidation = actions.stopAsyncValidation;\nexport var stopSubmit = actions.stopSubmit;\nexport var submit = actions.submit;\nexport var touch = actions.touch;\nexport var unregisterField = actions.unregisterField;\nexport var untouch = actions.untouch;\nexport var updateSyncWarnings = actions.updateSyncWarnings;\nexport var updateSyncErrors = actions.updateSyncErrors;","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';"],"sourceRoot":""}