{"version":3,"sources":["ui/forms/ServiceBatchForm/ServiceBatchForm.component.module.css","assets/files/service.xlsx","ui/forms/ServiceBatchForm/ServiceBatchForm.component.js","pages/Service/Add/ServiceAdd.js","../node_modules/redux-form/es/index.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js","ui/CustomFileInput/CustomFileInput.component.js","ui/CustomFileInput/CustomFileInput.component.module.css","ui/forms/ServiceForm/ServiceForm.component.module.css","ui/forms/ServiceForm/ServiceForm.component.js","ui/forms/ServiceForm/index.js"],"names":["module","exports","ServiceBatchForm","onSubmit","this","props","handleSubmit","className","Field","name","component","CustomSelect","label","validate","requiredValidator","options","displayValue","value","CustomFileInput","type","styles","buttonContainer","button","CustomButton","disabled","invalid","pristine","submittingForm","React","Component","reduxForm","form","ServiceAdd","state","submittingBatchForm","formData","setState","storeService","handleBatchSubmit","storeBatchService","data","service_category","picture","services","showNotification","a","async","status","reset","swal","title","text","service","icon","closeOnClickOutside","resetStoreService","batch_status","nextProps","active","role","key","url","Breadcrumb","links","Dashboard","to","style","width","ServiceForm","btnText","plans","marginBottom","require","connect","ChoseRoleReducer","ServiceReducer","store_service_status","message","store_service_message","store_batch_service_status","batch_message","store_batch_service_message","dispatch","payload","actions","arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","autofill","blur","change","clearAsyncError","clearFields","clearSubmit","clearSubmitErrors","destroy","focus","initialize","registerField","resetSection","setSubmitFailed","setSubmitSucceeded","startAsyncValidation","startSubmit","stopAsyncValidation","stopSubmit","submit","touch","unregisterField","untouch","updateSyncWarnings","updateSyncErrors","LayoutContentStyle","styled","div","palette","map","link","item","itemTwo","join","defaultProps","withRouter","adaptFileEventToValue","delegate","e","target","files","input","onChange","onBlur","inputProps","meta","formGroup","display","marginTop","formControl","CustomInput"],"mappings":"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","file":"static/js/25.31e75230.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"ServiceBatchForm.component_formContainer__3mtN9\",\"inlineGroup\":\"ServiceBatchForm.component_inlineGroup__1e3Ii\",\"formGroup\":\"ServiceBatchForm.component_formGroup__2ncm_\",\"buttonContainer\":\"ServiceBatchForm.component_buttonContainer___Zzlj\",\"button\":\"ServiceBatchForm.component_button__1_nCj\"};","module.exports = __webpack_public_path__ + \"static/media/service.7113156a.xlsx\";","import React from 'react';\nimport CustomSelect from '../../CustomSelect';\nimport CustomButton from '../../CustomButton';\nimport { Field, reduxForm } from 'redux-form';\nimport styles from './ServiceBatchForm.component.module.css';\nimport { requiredValidator } from '../../../shared/utils/validation';\nimport CustomFileInput from '../../CustomFileInput/CustomFileInput.component';\n\nclass ServiceBatchForm extends React.Component {\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit}>\n                <div  className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Field\n                            name=\"type\"\n                            component={CustomSelect}\n                            label=\"Type\"\n                            validate={[requiredValidator]}\n                            options={[\n                                {\n                                    displayValue: 'Primary',\n                                    value: 'P'\n                                },\n                                {\n                                    displayValue: 'Secondary',\n                                    value: 'S'\n                                },\n                                {\n                                    displayValue: 'Partial Exclusion',\n                                    value: 'T'\n                                },\n                                {\n                                    displayValue: 'Diagnosis',\n                                    value: 'D'\n                                },\n                            ]}\n                        />\n                    </div>\n                    <div className=\"col-md-12\">\n                        <Field\n                            name=\"service_category\"\n                            component={CustomSelect}\n                            label=\"Chose category\"\n                            validate={[requiredValidator]}\n                            options={[\n                                {\n                                    displayValue: 'Diagnosis',\n                                    value: 'Diagnosis'\n                                },\n                                {\n                                    displayValue: 'Laboratory',\n                                    value: 'Laboratory'\n                                },\n                                {\n                                    displayValue: 'Surgery',\n                                    value: 'Surgery'\n                                },\n                                {\n                                    displayValue: 'Procedures',\n                                    value: 'Procedures'\n                                },\n                                {\n                                    displayValue: 'Radiology',\n                                    value: 'Radiology'\n                                },\n                                {\n                                    displayValue: 'Pharmacy',\n                                    value: 'Pharmacy'\n                                },\n                                {\n                                    displayValue: 'Inpatient',\n                                    value: 'Inpatient'\n                                },\n                                {\n                                    displayValue: 'Consumable',\n                                    value: 'Consumable'\n                                },\n                                {\n                                    displayValue: 'Random',\n                                    value: 'Random'\n                                },\n                                {\n                                    displayValue: 'Others',\n                                    value: 'Others'\n                                },\n                            ]}\n                        />\n                    </div>\n                    <div className=\"col-md-12\">\n                        <Field\n                            name=\"services\"\n                            component={CustomFileInput}\n                            type=\"file\"\n                            label=\"Services\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n                </div><hr/>\n\n                <div className={styles.buttonContainer}>\n                    <div className={styles.button}>\n                        <CustomButton disabled={this.props.invalid || this.props.pristine} submittingForm={this.props.submittingForm}>Add</CustomButton>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default reduxForm({\n    form: 'ServiceBatchForm'\n})(ServiceBatchForm);","import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport { reset } from 'redux-form';\nimport {Card} from 'antd';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../../ui/Breadcrumb\";\nimport Loader from '../../../ui/Loader/Loader.Component';\nimport ServiceForm from '../../../ui/forms/ServiceForm';\nimport ServiceBatchForm from '../../../ui/forms/ServiceBatchForm';\nimport { storeService, resetStoreService, storeBatchService } from '../../../shared/actions/Service.action';\n\nclass ServiceAdd extends Component {\n\n    state = {\n        submittingForm: false,\n        submittingBatchForm: false\n    }\n\n    handleSubmit = formData => {\n        this.setState({\n            submittingForm: true\n        }, () => {\n            this.props.storeService(formData);\n        });\n    }\n\n    handleBatchSubmit = formData => {\n        this.setState({\n            submittingBatchForm: true\n        }, () => {\n            return this.props.storeBatchService({\n                data: {\n                    type: formData.type,\n                    service_category: formData.service_category\n                },\n                picture: formData.services\n            });\n        });\n    }\n\n    showNotification = async props => {\n        if (props.status === 200) {\n            this.props.reset('ServiceForm');\n            this.setState({\n                submittingForm: false\n            });\n\n            let alert = await swal({\n                title: \"Good job!\",\n                text: `${props.service.name} was created successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n            if (alert) {\n                this.props.resetStoreService();\n            }\n        }\n\n        if (props.batch_status === 200) {\n            this.props.reset('ServiceBatchForm');\n            this.setState({\n                submittingBatchForm: false\n            });\n\n            let alert = await swal({\n                title: \"Good job!\",\n                text: `services was created successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n            if (alert) {\n                this.props.resetStoreService();\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.showNotification(nextProps);\n    }\n\n    render() {\n\n        let actions = [];\n        let addNew, breadcrumb;\n\n        if (this.props.active.role.name === \"ADMIN\") {\n            actions = [\n                {\n                    key: \"slug\",\n                    type: \"delete\",\n                    title: \"Delete\",\n                    url: \"dashboard/service/delete/\"\n                },\n                {\n                    key: \"slug\",\n                    type: \"edit\",\n                    title: \"Edit\",\n                    url: \"dashboard/service_edit_\"\n                }\n            ];\n            breadcrumb = (\n                <Breadcrumb\n                    links={[\n                        {\n                            url: \"/dashboard/service_all\",\n                            name: \"All Services\"\n                        }\n                    ]}\n                />\n            )\n        }\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <h4>All Services</h4>\n                                </div>\n                                {this.props.active.role.name === \"ADMIN\" && (\n                                    <div className=\"col-md-6 text-right\">\n                                        <Link className=\"\" to=\"/dashboard/service_add\">\n                                            <button className=\"btn btn-sm btn-success\" type=\"button\">Add Service</button>\n                                        </Link>\n                                    </div>\n                                )}\n                            </div><hr/>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <Card title=\"Create A Service\" style={{width: '100%'}}>\n                                        <ServiceForm\n                                            btnText=\"Add\"\n                                            plans={this.props.plans}\n                                            onSubmit={this.handleSubmit}\n                                            submittingForm={this.state.submittingForm}\n                                        />\n                                    </Card>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <Card style={{width: '100%'}}>\n                                        <div style={{marginBottom: '30px'}}>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-7\"><h4>Batch Service Upload</h4></div>\n                                                <div className=\"col-md-5\">\n                                                    <Link to={require('../../../assets/files/service.xlsx')} >\n                                                        <button type=\"\" className=\"btn btn-sm btn-outline-success pull-right\">Download Format</button>\n                                                    </Link>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <ServiceBatchForm \n                                            plans={this.props.plans} \n                                            onSubmit={this.handleBatchSubmit} \n                                            submittingForm={this.state.submittingBatchForm} \n                                        />\n                                    </Card>\n                                </div>\n                            </div>\n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    active: state.ChoseRoleReducer.role,\n    service: state.ServiceReducer.service,\n    status: state.ServiceReducer.store_service_status,\n    message: state.ServiceReducer.store_service_message,\n    batch_status: state.ServiceReducer.store_batch_service_status,\n    batch_message: state.ServiceReducer.store_batch_service_message\n});\n\nconst mapDispatchToProps = dispatch => ({\n    reset: payload => dispatch(reset(payload)),\n    resetStoreService: () => dispatch( resetStoreService() ),\n    storeService: payload => dispatch( storeService(payload) ),\n    storeBatchService: payload => dispatch( storeBatchService(payload) )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceAdd);","import actions from './actions';\nimport * as _actionTypes from './actionTypes';\nexport { ReduxFormContext } from './ReduxFormContext';\nexport { default as defaultShouldAsyncValidate } from './defaultShouldAsyncValidate';\nexport { default as defaultShouldValidate } from './defaultShouldValidate';\nexport { default as defaultShouldError } from './defaultShouldError';\nexport { default as defaultShouldWarn } from './defaultShouldWarn';\nexport { default as Form } from './Form';\nexport { default as FormName } from './FormName';\nexport { default as FormSection } from './FormSection';\nexport { default as SubmissionError } from './SubmissionError'; // alias for propTypes\n\nexport { default as propTypes, fieldInputPropTypes, fieldMetaPropTypes, fieldPropTypes, fieldArrayFieldsPropTypes, fieldArrayMetaPropTypes, fieldArrayPropTypes, formPropTypes } from './propTypes';\nexport { default as Field } from './Field';\nexport { default as Fields } from './Fields';\nexport { default as FieldArray } from './FieldArray';\nexport { default as formValueSelector } from './formValueSelector';\nexport { default as formValues } from './formValues';\nexport { default as getFormError } from './getFormError';\nexport { default as getFormNames } from './getFormNames';\nexport { default as getFormValues } from './getFormValues';\nexport { default as getFormInitialValues } from './getFormInitialValues';\nexport { default as getFormSyncErrors } from './getFormSyncErrors';\nexport { default as getFormMeta } from './getFormMeta';\nexport { default as getFormAsyncErrors } from './getFormAsyncErrors';\nexport { default as getFormSyncWarnings } from './getFormSyncWarnings';\nexport { default as getFormSubmitErrors } from './getFormSubmitErrors';\nexport { default as isAsyncValidating } from './isAsyncValidating';\nexport { default as isDirty } from './isDirty';\nexport { default as isInvalid } from './isInvalid';\nexport { default as isPristine } from './isPristine';\nexport { default as isValid } from './isValid';\nexport { default as isSubmitting } from './isSubmitting';\nexport { default as hasSubmitSucceeded } from './hasSubmitSucceeded';\nexport { default as hasSubmitFailed } from './hasSubmitFailed';\nexport { default as reduxForm } from './reduxForm';\nexport { default as reducer } from './reducer';\nexport { default as values } from './values';\nexport var actionTypes = _actionTypes;\nexport var arrayInsert = actions.arrayInsert;\nexport var arrayMove = actions.arrayMove;\nexport var arrayPop = actions.arrayPop;\nexport var arrayPush = actions.arrayPush;\nexport var arrayRemove = actions.arrayRemove;\nexport var arrayRemoveAll = actions.arrayRemoveAll;\nexport var arrayShift = actions.arrayShift;\nexport var arraySplice = actions.arraySplice;\nexport var arraySwap = actions.arraySwap;\nexport var arrayUnshift = actions.arrayUnshift;\nexport var autofill = actions.autofill;\nexport var blur = actions.blur;\nexport var change = actions.change;\nexport var clearAsyncError = actions.clearAsyncError;\nexport var clearFields = actions.clearFields;\nexport var clearSubmit = actions.clearSubmit;\nexport var clearSubmitErrors = actions.clearSubmitErrors;\nexport var destroy = actions.destroy;\nexport var focus = actions.focus;\nexport var initialize = actions.initialize;\nexport var registerField = actions.registerField;\nexport var reset = actions.reset;\nexport var resetSection = actions.resetSection;\nexport var setSubmitFailed = actions.setSubmitFailed;\nexport var setSubmitSucceeded = actions.setSubmitSucceeded;\nexport var startAsyncValidation = actions.startAsyncValidation;\nexport var startSubmit = actions.startSubmit;\nexport var stopAsyncValidation = actions.stopAsyncValidation;\nexport var stopSubmit = actions.stopSubmit;\nexport var submit = actions.submit;\nexport var touch = actions.touch;\nexport var unregisterField = actions.unregisterField;\nexport var untouch = actions.untouch;\nexport var updateSyncWarnings = actions.updateSyncWarnings;\nexport var updateSyncErrors = actions.updateSyncErrors;","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';","import React from \"react\";\r\nimport styles from \"./CustomFileInput.component.module.css\";\r\n\r\nconst adaptFileEventToValue = delegate => e => delegate(e.target.files[0]);\r\n\r\nconst CustomFileInput = ({ input: { value: omitValue, onChange, onBlur, ...inputProps }, meta: omitMeta, ...props }) => (\r\n    <div className={styles.formGroup}>\r\n        <input\r\n            onChange={adaptFileEventToValue(onChange)}\r\n            onBlur={adaptFileEventToValue(onBlur)}\r\n            type=\"file\"\r\n            style={{display: 'block',marginTop: '20px'}}\r\n            className={styles.formControl}\r\n            {...inputProps}\r\n            {...props}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default CustomFileInput;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroup\":\"CustomFileInput.component_formGroup__3FzjQ\",\"formControl\":\"CustomFileInput.component_formControl__2rJtR\",\"formControlValid\":\"CustomFileInput.component_formControlValid__2rrsX\",\"formControlError\":\"CustomFileInput.component_formControlError__1BIvz\",\"errorText\":\"CustomFileInput.component_errorText__1wW0P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"ServiceForm.component_formContainer__1MF-w\",\"inlineGroup\":\"ServiceForm.component_inlineGroup__1E6aU\",\"formGroup\":\"ServiceForm.component_formGroup__1Ii3y\",\"buttonContainer\":\"ServiceForm.component_buttonContainer__2sdBL\",\"button\":\"ServiceForm.component_button__1IoHW\"};","import React from 'react';\nimport CustomInput from '../../CustomInput';\nimport CustomSelect from '../../CustomSelect';\nimport CustomButton from '../../CustomButton';\nimport { Field, reduxForm } from 'redux-form';\nimport styles from './ServiceForm.component.module.css';\nimport { requiredValidator } from '../../../shared/utils/validation';\n\nclass ServiceForm extends React.Component {\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit}>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"name\"\n                            component={CustomInput}\n                            type=\"text\"\n                            label=\"Name\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"type\"\n                            component={CustomSelect}\n                            label=\"Type\"\n                            validate={[requiredValidator]}\n                            options={[\n                                {\n                                    displayValue: 'Primary',\n                                    value: 'P'\n                                },\n                                {\n                                    displayValue: 'Secondary',\n                                    value: 'S'\n                                },\n                                {\n                                    displayValue: 'Partial Exclusion',\n                                    value: 'T'\n                                },\n                                {\n                                    displayValue: 'Diagnosis',\n                                    value: 'D'\n                                },\n                            ]}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"service_category\"\n                            component={CustomSelect}\n                            label=\"Category\"\n                            validate={[requiredValidator]}\n                            options={[\n                                {\n                                    displayValue: 'Diagnosis',\n                                    value: 'Diagnosis'\n                                },\n                                {\n                                    displayValue: 'Laboratory',\n                                    value: 'Laboratory'\n                                },\n                                {\n                                    displayValue: 'Surgery',\n                                    value: 'Surgery'\n                                },\n                                {\n                                    displayValue: 'Procedures',\n                                    value: 'Procedures'\n                                },\n                                {\n                                    displayValue: 'Radiology',\n                                    value: 'Radiology'\n                                },\n                                {\n                                    displayValue: 'Pharmacy (Drugs)',\n                                    value: 'Pharmacy'\n                                },\n                                {\n                                    displayValue: 'Inpatient',\n                                    value: 'Inpatient'\n                                },\n                                {\n                                    displayValue: 'Consumable',\n                                    value: 'Consumable'\n                                },\n                                {\n                                    displayValue: 'Random',\n                                    value: 'Random'\n                                },\n                                {\n                                    displayValue: 'Others',\n                                    value: 'Others'\n                                },\n                            ]}\n                        />\n                    </div>\n\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"price\"\n                            component={CustomInput}\n                            type=\"number\"\n                            label=\"Price\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"is_active\"\n                            component={CustomSelect}\n                            label=\"Status\"\n                            validate={[requiredValidator]}\n                            options={[\n                                {\n                                    displayValue: 'Active',\n                                    value: 1\n                                },\n                                {\n                                    displayValue: 'Inactive',\n                                    value: 0\n                                },\n                            ]}\n                        />\n                    </div>\n                </div><hr/>\n\n                <div className={styles.buttonContainer}>\n                    <div className={styles.button}>\n                        <CustomButton disabled={this.props.invalid || this.props.pristine} submittingForm={this.props.submittingForm}>{this.props.btnText}</CustomButton>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default reduxForm({\n    form: 'ServiceForm'\n})(ServiceForm);","export { default } from './ServiceForm.component';"],"sourceRoot":""}