{"version":3,"sources":["pages/Policy/Add/PolicyAdd.js","../node_modules/redux-form/es/index.js","components/utility/layoutContent.style.js","components/utility/layoutContent.js","ui/Breadcrumb/Breadcrumb.component.module.css","ui/Breadcrumb/Breadcrumb.component.js","ui/Breadcrumb/index.js","ui/Spinner/Spinner.component.module.css","ui/Spinner/Spinner.component.js","ui/Spinner/index.js","ui/forms/PolicyForm/PolicyForm.component.module.css","ui/forms/PolicyForm/PolicyForm.component.js","ui/forms/PolicyForm/index.js"],"names":["PolicyAdd","state","submittingForm","handleSubmit","formData","setState","props","storePolicy","showNotification","a","async","status","reset","swal","title","text","policy","name","icon","closeOnClickOutside","resetStorePolicy","this","policyCreateDependency","nextProps","dependency_status","Fragment","className","to","type","plans","companies","organization_profiles","onSubmit","btnText","Component","connect","PolicyReducer","dependency_plans","dependency_organization_profiles","get_dependency_status","store_policy_status","message","store_policy_message","dispatch","payload","actions","arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","autofill","blur","change","clearAsyncError","clearFields","clearSubmit","clearSubmitErrors","destroy","focus","initialize","registerField","resetSection","setSubmitFailed","setSubmitSucceeded","startAsyncValidation","startSubmit","stopAsyncValidation","stopSubmit","submit","touch","unregisterField","untouch","updateSyncWarnings","updateSyncErrors","LayoutContentStyle","styled","div","palette","module","exports","Breadcrumb","links","map","link","url","styles","item","itemTwo","join","key","defaultProps","withRouter","active","ChoseRoleReducer","role","Spinner","container","content","reduxForm","form","pristine","invalid","style","width","Field","component","CustomInput","compulsory","label","validate","requiredValidator","CustomSelect","options","plan","value","id","displayValue","buttonContainer","button","CustomButton","disabled"],"mappings":"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","file":"static/js/28.73c400fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport swal from 'sweetalert';\nimport { reset } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\nimport Spinner from '../../../ui/Spinner';\nimport LayoutContent from '@iso/components/utility/layoutContent';\nimport DashboardLayout from '../../../containers/Dashboard/Dashboard';\nimport Breadcrumb from \"../../../ui/Breadcrumb\";\nimport Loader from '../../../ui/Loader/Loader.Component';\nimport PolicyForm from '../../../ui/forms/PolicyForm';\nimport { policyCreateDependency, storePolicy, resetStorePolicy } from '../../../shared/actions/Policy.action';\n\nclass PolicyAdd extends Component {\n\n    state = {\n        submittingForm: false,\n    }\n\n    componentDidMount() {\n        this.props.policyCreateDependency();\n    }\n\n    handleSubmit = formData => {\n        this.setState({\n            submittingForm: true\n        }, () => {\n            this.props.storePolicy(formData);\n        });\n    }\n\n    showNotification = async props => {\n        if (props.status === 200) {\n            this.props.reset('PolicyForm');\n            this.setState({\n                submittingForm: false\n            });\n\n            let alert = await swal({\n                title: \"Good job!\",\n                text: `${props.policy.name} was created successfully!`,\n                icon: \"success\",\n                closeOnClickOutside: false\n            });\n\n            if (alert) {\n                this.setState({\n                    submittingForm: false\n                });\n                this.props.resetStorePolicy();\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.showNotification(nextProps);\n    }\n\n    render() {\n\n        return (\n            <DashboardLayout>\n                <Loader>\n                    <LayoutContentWrapper>\n                        <LayoutContent>  \n                            {this.props.dependency_status === 200 && (\n                                <React.Fragment>\n                                    <div className=\"row\">\n                                        <div className=\"col-md-6\">\n                                            <h4>Policy Upload</h4>\n                                        </div>\n                                        <div className=\"col-md-6 text-right\">\n                                            <Link className=\"\" to=\"/dashboard/policy_all\">\n                                                <button className=\"btn btn-sm btn-success\" type=\"button\">All Policies</button>\n                                            </Link>\n                                        </div> \n                                    </div><hr/>\n                                    <div className=\"row\">\n                                        <div className=\"col-md-12\">\n                                            <PolicyForm\n                                                plans={this.props.plans}\n                                                companies={this.props.organization_profiles}\n                                                onSubmit={this.handleSubmit}\n                                                submittingForm={this.state.submittingForm}\n                                                btnText=\"Submit\"\n                                            />\n                                        </div>\n                                    </div>\n                                </React.Fragment>\n                            )}\n                            {!this.props.dependency_status === 200 && (\n                                <Spinner />\n                            )}\n                            \n                        </LayoutContent>\n                    </LayoutContentWrapper>\n                </Loader>\n            </DashboardLayout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    plans: state.PolicyReducer.dependency_plans,\n    organization_profiles: state.PolicyReducer.dependency_organization_profiles,\n    dependency_status: state.PolicyReducer.get_dependency_status,\n    policy: state.PolicyReducer.policy,\n    status: state.PolicyReducer.store_policy_status,\n    message: state.PolicyReducer.store_policy_message,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    reset: payload => dispatch( reset(payload) ),\n    resetStorePolicy: () => dispatch( resetStorePolicy() ),\n    storePolicy: payload => dispatch( storePolicy(payload) ),\n    policyCreateDependency: () => dispatch(policyCreateDependency()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PolicyAdd);","import actions from './actions';\nimport * as _actionTypes from './actionTypes';\nexport { ReduxFormContext } from './ReduxFormContext';\nexport { default as defaultShouldAsyncValidate } from './defaultShouldAsyncValidate';\nexport { default as defaultShouldValidate } from './defaultShouldValidate';\nexport { default as defaultShouldError } from './defaultShouldError';\nexport { default as defaultShouldWarn } from './defaultShouldWarn';\nexport { default as Form } from './Form';\nexport { default as FormName } from './FormName';\nexport { default as FormSection } from './FormSection';\nexport { default as SubmissionError } from './SubmissionError'; // alias for propTypes\n\nexport { default as propTypes, fieldInputPropTypes, fieldMetaPropTypes, fieldPropTypes, fieldArrayFieldsPropTypes, fieldArrayMetaPropTypes, fieldArrayPropTypes, formPropTypes } from './propTypes';\nexport { default as Field } from './Field';\nexport { default as Fields } from './Fields';\nexport { default as FieldArray } from './FieldArray';\nexport { default as formValueSelector } from './formValueSelector';\nexport { default as formValues } from './formValues';\nexport { default as getFormError } from './getFormError';\nexport { default as getFormNames } from './getFormNames';\nexport { default as getFormValues } from './getFormValues';\nexport { default as getFormInitialValues } from './getFormInitialValues';\nexport { default as getFormSyncErrors } from './getFormSyncErrors';\nexport { default as getFormMeta } from './getFormMeta';\nexport { default as getFormAsyncErrors } from './getFormAsyncErrors';\nexport { default as getFormSyncWarnings } from './getFormSyncWarnings';\nexport { default as getFormSubmitErrors } from './getFormSubmitErrors';\nexport { default as isAsyncValidating } from './isAsyncValidating';\nexport { default as isDirty } from './isDirty';\nexport { default as isInvalid } from './isInvalid';\nexport { default as isPristine } from './isPristine';\nexport { default as isValid } from './isValid';\nexport { default as isSubmitting } from './isSubmitting';\nexport { default as hasSubmitSucceeded } from './hasSubmitSucceeded';\nexport { default as hasSubmitFailed } from './hasSubmitFailed';\nexport { default as reduxForm } from './reduxForm';\nexport { default as reducer } from './reducer';\nexport { default as values } from './values';\nexport var actionTypes = _actionTypes;\nexport var arrayInsert = actions.arrayInsert;\nexport var arrayMove = actions.arrayMove;\nexport var arrayPop = actions.arrayPop;\nexport var arrayPush = actions.arrayPush;\nexport var arrayRemove = actions.arrayRemove;\nexport var arrayRemoveAll = actions.arrayRemoveAll;\nexport var arrayShift = actions.arrayShift;\nexport var arraySplice = actions.arraySplice;\nexport var arraySwap = actions.arraySwap;\nexport var arrayUnshift = actions.arrayUnshift;\nexport var autofill = actions.autofill;\nexport var blur = actions.blur;\nexport var change = actions.change;\nexport var clearAsyncError = actions.clearAsyncError;\nexport var clearFields = actions.clearFields;\nexport var clearSubmit = actions.clearSubmit;\nexport var clearSubmitErrors = actions.clearSubmitErrors;\nexport var destroy = actions.destroy;\nexport var focus = actions.focus;\nexport var initialize = actions.initialize;\nexport var registerField = actions.registerField;\nexport var reset = actions.reset;\nexport var resetSection = actions.resetSection;\nexport var setSubmitFailed = actions.setSubmitFailed;\nexport var setSubmitSucceeded = actions.setSubmitSucceeded;\nexport var startAsyncValidation = actions.startAsyncValidation;\nexport var startSubmit = actions.startSubmit;\nexport var stopAsyncValidation = actions.stopAsyncValidation;\nexport var stopSubmit = actions.stopSubmit;\nexport var submit = actions.submit;\nexport var touch = actions.touch;\nexport var unregisterField = actions.unregisterField;\nexport var untouch = actions.untouch;\nexport var updateSyncWarnings = actions.updateSyncWarnings;\nexport var updateSyncErrors = actions.updateSyncErrors;","import styled from 'styled-components';\nimport { palette } from 'styled-theme';\n\nconst LayoutContentStyle = styled.div`\n  width: 100%;\n  padding: 35px;\n  background-color: #ffffff;\n  border: 1px solid ${palette('border', 0)};\n  height: 100%;\n`;\n\nexport default LayoutContentStyle;\n","import LayoutContentStyle from './layoutContent.style';\n\nexport default LayoutContentStyle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumb.component_container__2V5_E\",\"item\":\"Breadcrumb.component_item__ZqqpH\",\"itemTwo\":\"Breadcrumb.component_itemTwo__1JtzI\"};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport styles from './Breadcrumb.component.module.css';\n\nconst Breadcrumb = props => {\n    let links = props.links.map(link => (\n        <Link to={link.url} className={[styles.item, styles.itemTwo].join(\" \")} key={link.url}> > {link.name}</Link>\n    ));\n\n    return (\n        <div className={'card-body bg-light '} >\n            <Link className={styles.item} to=\"/chose_role\">Dashboard</Link>\n            {links}\n        </div>\n    )\n}\n\nBreadcrumb.defaultProps = {\n    links: []\n}\n\nconst mapStateToProps = state => {\n    return {\n        active: state.ChoseRoleReducer.role\n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(Breadcrumb));","export { default } from './Breadcrumb.component';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Spinner.component_container__W-GWN\",\"content\":\"Spinner.component_content__11MBV\",\"message\":\"Spinner.component_message__3kFxw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Spinner.component.module.css';\n\nconst Spinner = ({message}) => (\n\t<div className={styles.container}>\n\t\t<div className={styles.content}>\n\t\t\t<i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\n\t\t\t<div className={styles.message}>\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\n\nSpinner.defaultProps = {\n\tmessage: 'Loading'\n};\n\nexport default Spinner;","export { default } from './Spinner.component.js';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"PolicyForm.component_formContainer__iItTv\",\"inlineGroup\":\"PolicyForm.component_inlineGroup__1EdKm\",\"formGroup\":\"PolicyForm.component_formGroup__2gZuB\",\"buttonContainer\":\"PolicyForm.component_buttonContainer__3VJ2K\",\"button\":\"PolicyForm.component_button__G93d2\"};","import React from 'react';\nimport {Card} from 'antd';\nimport CustomInput from '../../CustomInput';\nimport CustomSelect from '../../CustomSelect';\nimport CustomButton from '../../CustomButton';\nimport { Field, reduxForm } from 'redux-form';\nimport styles from './PolicyForm.component.module.css';\nimport { requiredValidator } from '../../../shared/utils/validation';\n\nconst PolicyForm = ({ handleSubmit, pristine, invalid, btnText, companies, plans, submittingForm}) => {\n\n    return (\n\n        <form onSubmit={handleSubmit}>\n            <Card style={{width: '100%'}}>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"name\"\n                            component={CustomInput}\n                            compulsory={true}\n                            type=\"text\"\n                            label=\"Name\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"price\"\n                            component={CustomInput}\n                            compulsory={true}\n                            type=\"number\"\n                            label=\"Price\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"maximum_no_of_beneficiary\"\n                            component={CustomInput}\n                            compulsory={true}\n                            type=\"number\"\n                            label=\"Maximum number of enrollee\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"maximum_no_of_beneficiary_dependant\"\n                            component={CustomInput}\n                            compulsory={true}\n                            type=\"number\"\n                            label=\"Maximum number of enrollee dependant\"\n                            validate={[requiredValidator]}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"plan_id\"\n                            component={CustomSelect}\n                            compulsory={true}\n                            label=\"Plan\"\n                            validate={[requiredValidator]}\n                            options={plans.map(plan => {\n                                return {\n                                    value: plan.id,\n                                    displayValue: plan.name\n                                }\n                            })}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"duration\"\n                            component={CustomSelect}\n                            compulsory={true}\n                            label=\"Duration\"\n                            validate={[requiredValidator]}\n                            options={[\n                                {\n                                    displayValue: '6 Months',\n                                    value: '6'\n                                },\n                                {\n                                    displayValue: '12 Months',\n                                    value: '12'\n                                },\n                            ]}\n                        />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <Field\n                            name=\"is_active\"\n                            component={CustomSelect}\n                            compulsory={true}\n                            label=\"Status\"\n                            validate={[requiredValidator]}\n                            options={[\n                                {\n                                    displayValue: 'Active',\n                                    value: 1\n                                },\n                                {\n                                    displayValue: 'Inactive',\n                                    value: 0\n                                },\n                            ]}\n                        />\n                    </div>\n                </div>\n            </Card><br/>\n            <div className=\"row col-md-12\">\n                <div className={styles.buttonContainer}>\n                    <div className={styles.button}>\n                        <CustomButton disabled={invalid || pristine} submittingForm={submittingForm}>{btnText}</CustomButton>\n                    </div>\n                </div>\n            </div>\n        </form>\n    );\n}\n\nexport default reduxForm({\n    form: 'PolicyForm'\n})(PolicyForm);","export { default } from './PolicyForm.component';"],"sourceRoot":""}